<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tencent.QCloud.Cos.Sdk</name>
    </assembly>
    <members>
        <member name="T:COSXML.Auth.DefaultQCloudCredentialProvider">
            <summary>
            通过 云 api
            </summary>
        </member>
        <member name="T:COSXML.Auth.DefaultSessionQCloudCredentialProvider">
            <summary>
            通过 临时密钥
            </summary>
        </member>
        <member name="M:COSXML.Auth.DefaultSessionQCloudCredentialProvider.SetQCloudCredential(System.String,System.String,System.String,System.String)">
            <summary>
            直接复制临时密钥信息
            </summary>
            <param name="tmpSecretId">临时安全证书 Id</param>
            <param name="tmpSecretKey">临时安全证书 Key</param>
            <param name="tmpkeyTime">证书有效的期间</param>
            <param name="sessionToken">token 值</param>
        </member>
        <member name="T:COSXML.Auth.STSQCloudCredentialProvider">
            <summary>
            通过请求STS Server获取临时密钥
            </summary>
        </member>
        <member name="T:COSXML.Auth.QCloudCredentials">
            <summary>
            cos 业务认证: secretId, signKey, keyTime
            signKey be calculated by secretKey and keyTime
            </summary>
        </member>
        <member name="T:COSXML.Auth.QCloudSigner">
            <summary>
            sign caculation
            </summary>
        </member>
        <member name="M:COSXML.Auth.CosXmlSignSourceProvider.GenerateSource(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            $HttpString = [HttpMethod]\n[HttpURI]\n[HttpParameters]\n[HttpHeaders]\n
            </summary>
            <param name="method"></param>
            <param name="path"></param>
            <param name="queryParameters"></param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:COSXML.Auth.CosXmlSignSourceProvider.LowerAndSort(System.Collections.Generic.List{System.String})">
            <summary>
            小写 排序
            </summary>
            <param name="list"></param>
        </member>
        <member name="F:COSXML.Common.CosACL.PRIVATE">
            <summary>
            私有读写
            </summary>
        </member>
        <member name="F:COSXML.Common.CosACL.PUBLIC_READ">
            <summary>
            私有写公有读
            </summary>
        </member>
        <member name="F:COSXML.Common.CosACL.PUBLIC_READ_WRITE">
            <summary>
            公有读写
            </summary>
        </member>
        <member name="F:COSXML.Common.CosGrantPermission.READ">
            <summary>
            只读权限
            </summary>
        </member>
        <member name="F:COSXML.Common.CosGrantPermission.WRITE">
            <summary>
            只写权限
            </summary>
        </member>
        <member name="F:COSXML.Common.CosGrantPermission.FULL_CONTROL">
            <summary>
            读写权限
            </summary>
        </member>
        <member name="F:COSXML.Common.CosRegion.AP_Beijing_1">
            <summary>
            北京一区（华北）
            </summary>
        </member>
        <member name="F:COSXML.Common.CosRegion.AP_Beijing">
            <summary>
            北京
            </summary>
        </member>
        <member name="F:COSXML.Common.CosRegion.AP_Shanghai">
            <summary>
            上海（华东）
            </summary>
        </member>
        <member name="F:COSXML.Common.CosRegion.AP_Guangzhou">
            <summary>
            广州（华南）
            </summary>
        </member>
        <member name="F:COSXML.Common.CosRegion.AP_Guangzhou_2">
            <summary>
            
            </summary>
        </member>
        <member name="F:COSXML.Common.CosRegion.AP_Chengdu">
            <summary>
            成都（西南）
            </summary>
        </member>
        <member name="F:COSXML.Common.CosRegion.AP_Singapore">
            <summary>
            新加坡
            </summary>
        </member>
        <member name="F:COSXML.Common.CosRegion.AP_Hongkong">
            <summary>
            香港
            </summary>
        </member>
        <member name="F:COSXML.Common.CosRegion.NA_Toronto">
            <summary>
            多伦多
            </summary>
        </member>
        <member name="F:COSXML.Common.CosRegion.EU_Frankfurt">
            <summary>
            法兰克福
            </summary>
        </member>
        <member name="F:COSXML.Common.CosRegion.AP_Mumbai">
            <summary>
            孟买
            </summary>
        </member>
        <member name="F:COSXML.Common.CosRegion.AP_Seoul">
            <summary>
            首尔
            </summary>
        </member>
        <member name="F:COSXML.Common.CosRegion.NA_Siliconvalley">
            <summary>
            硅谷
            </summary>
        </member>
        <member name="F:COSXML.Common.CosRegion.NA_Ashburn">
            <summary>
            弗吉尼亚
            </summary>
        </member>
        <member name="F:COSXML.Common.CosRegion.AP_Bangkok">
            <summary>
            曼谷
            </summary>
        </member>
        <member name="F:COSXML.Common.CosRegion.EU_Moscow">
            <summary>
            莫斯科
            </summary>
        </member>
        <member name="F:COSXML.Common.CosRegion.AO_Tokyo">
            <summary>
            东京
            </summary>
        </member>
        <member name="F:COSXML.Common.CosStorageClass.STANDARD">
            <summary>
            标准储存
            </summary>
        </member>
        <member name="F:COSXML.Common.CosStorageClass.STANDARD_IA">
            <summary>
            低频存储
            </summary>
        </member>
        <member name="F:COSXML.Common.CosStorageClass.ARCHIVE">
            <summary>
            归档储存
            </summary>
        </member>
        <member name="T:COSXML.CosException.CosClientException">
            <summary>
            cosClientException for parametes in cos request.
            </summary>
        </member>
        <member name="F:COSXML.CosException.CosClientException.errorCode">
            <summary>
            errorCode is for client exception code.
            <see cref="T:COSXML.Common.CosClientError"/>
            </summary>
        </member>
        <member name="T:COSXML.CosException.CosServerException">
            <summary>
            CosServerException for cos server error.
            <see cref="T:COSXML.Model.Tag.CosServerError"/>
            </summary>
        </member>
        <member name="F:COSXML.CosException.CosServerException.statusCode">
            <summary>
            http status code
            </summary>
        </member>
        <member name="F:COSXML.CosException.CosServerException.statusMessage">
            <summary>
            http status message
            </summary>
        </member>
        <member name="F:COSXML.CosException.CosServerException.errorCode">
            <summary>
            cos server error code
            </summary>
        </member>
        <member name="F:COSXML.CosException.CosServerException.errorMessage">
            <summary>
            cos server error message
            </summary>
        </member>
        <member name="F:COSXML.CosException.CosServerException.requestId">
            <summary>
            cos server requestId for tracking error
            </summary>
        </member>
        <member name="F:COSXML.CosException.CosServerException.traceId">
            <summary>
            cos server trace id
            </summary>
        </member>
        <member name="F:COSXML.CosException.CosServerException.resource">
            <summary>
            cos server resuorce
            </summary>
        </member>
        <member name="M:COSXML.CosXml.GenerateSign(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.Int64)">
            <summary>
            生成签名串
            </summary>
            <param name="method">http method</param>
            <param name="path">http url path</param>
            <param name="queryParameters">http url query</param>
            <param name="headers">http header</param>
            <param name="signTime">sign time</param>
            <returns></returns>
        </member>
        <member name="M:COSXML.CosXml.GenerateSignURL(COSXML.Model.Tag.PreSignatureStruct)">
            <summary>
            生成预签名URL
            </summary>
            <param name="request"></param>
            <param name="queryParameters"></param>
            <param name="headers"></param>
            <param name="signTime"></param>
            <returns></returns>
        </member>
        <member name="M:COSXML.CosXml.GetService(COSXML.Model.Service.GetServiceRequest)">
            <summary>
            get service for cos
               try
               {
               	GetServiceRequest request = new GetServiceRequest();
               	//设置签名有效时长
               	request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               	//执行请求
               	GetServiceResult result = cosXml.GetService(request);
               	//请求成功
               	Console.WriteLine(result.GetResultInfo());
               }
               catch (COSXML.CosException.CosClientException clientEx)
               {
               	//请求失败
               	Console.WriteLine("CosClientException: " + clientEx.Message);
               }
               catch (COSXML.CosException.CosServerException serverEx)
               {	
               	//请求失败
               	Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               }
            </summary>
            <param name="request"> <see cref="T:COSXML.Model.Service.GetServiceRequest"/>GetServiceRequest </param>
            <returns><see cref="T:COSXML.Model.Service.GetServiceResult"/>GetServiceResult</returns>
            <exception cref="T:COSXML.CosException.CosServerException">CosServerException</exception>
            <exception cref="T:COSXML.CosException.CosClientException">CosClientException</exception>
        </member>
        <member name="M:COSXML.CosXml.GetService(COSXML.Model.Service.GetServiceRequest,COSXML.Callback.OnSuccessCallback{COSXML.Model.CosResult},COSXML.Callback.OnFailedCallback)">
            <summary>
            asynchronous get service for cos
               //异步方法
               GetServiceRequest request = new GetServiceRequest();
               //设置签名有效时长
               request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               cosXml.GetService(request, 
               	delegate(COSXML.Model.CosResult cosResult)
               	{
               		//请求成功
               		GetServiceResult result = cosResult as GetServiceResult;
               		Console.WriteLine(result.GetResultInfo());
               
               	}, 
               	delegate(COSXML.CosException.CosClientException clientEx, COSXML.CosException.CosServerException serverEx)
               	{
               		//请求失败
               		if (clientEx != null)
               		{
               			Console.WriteLine("CosClientException: " + clientEx.Message);
               		}
               		else if (serverEx != null)
               		{
               			Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               		}
               });
            </summary>
            <param name="request">GetServiceRequest</param>
            <param name="successCallback">OnSuccessCallback</param>
            <param name="failCallback">OnFailedCallback</param>
        </member>
        <member name="M:COSXML.CosXml.PutBucket(COSXML.Model.Bucket.PutBucketRequest)">
            <summary>
            put bucket for cos
               try
               {
               	string bucket = "test-1253960454"; //格式：bucketname-appid
               	PutBucketRequest request = new PutBucketRequest(bucket);
               	//设置签名有效时长
               	request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               	//执行请求
               	PutBucketResult result = cosXml.PutBucket(request);
               	//请求成功
               	Console.WriteLine(result.GetResultInfo());
               }
               catch (COSXML.CosException.CosClientException clientEx)
               {
               	//请求失败
               	Console.WriteLine("CosClientException: " + clientEx.Message);
               }
               catch (COSXML.CosException.CosServerException serverEx)
               {
               	//请求失败
               	Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               }
            </summary>
            <param name="request">PutBucketRequest</param>
            <returns>PutBucketResult</returns>
            <exception cref="T:COSXML.CosException.CosServerException">CosServerException</exception>
            <exception cref="T:COSXML.CosException.CosClientException">CosClientException</exception>
        </member>
        <member name="M:COSXML.CosXml.PutBucket(COSXML.Model.Bucket.PutBucketRequest,COSXML.Callback.OnSuccessCallback{COSXML.Model.CosResult},COSXML.Callback.OnFailedCallback)">
            <summary>
            asynchronous put bucket for cos
               //异步方法
               string bucket = "test-1253960454"; //格式：bucketname-appid
               PutBucketRequest request = new PutBucketRequest(bucket);
               //设置签名有效时长
               request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               cosXml.PutBucket(request, 
               	delegate(COSXML.Model.CosResult cosResult)
               	{
               		//请求成功
               		PutBucketResult result = cosResult as PutBucketResult;
               		Console.WriteLine(result.GetResultInfo());
               
               	}, 
               	delegate(COSXML.CosException.CosClientException clientEx, COSXML.CosException.CosServerException serverEx)
               	{
               		//请求失败
               		if (clientEx != null)
               		{
               			Console.WriteLine("CosClientException: " + clientEx.Message);
               		}
               		else if (serverEx != null)
               		{
               			Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               		}
               });
            </summary>
            <param name="request"></param>
            <param name="successCallback"></param>
            <param name="failCallback"></param>
        </member>
        <member name="M:COSXML.CosXml.HeadBucket(COSXML.Model.Bucket.HeadBucketRequest)">
            <summary>
            Head bucket for cos
               try
               {
               	string bucket = "test-1253960454"; //格式：bucketname-appid
               	HeadBucketRequest request = new HeadBucketRequest(bucket);
               	//设置签名有效时长
               	request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               	//执行请求
               	HeadBucketResult result = cosXml.HeadBucket(request);
               	//请求成功
               	Console.WriteLine(result.GetResultInfo());
               }
               catch (COSXML.CosException.CosClientException clientEx)
               {	
               	//请求失败
               	Console.WriteLine("CosClientException: " + clientEx.Message);
               }
               catch (COSXML.CosException.CosServerException serverEx)
               {
               	//请求失败
               	Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               }
            </summary>
            <param name="request">HeadBucketRequest</param>
            <returns>HeadBucketResult</returns>
            <exception cref="T:COSXML.CosException.CosServerException">CosServerException</exception>
            <exception cref="T:COSXML.CosException.CosClientException">CosClientException</exception>
        </member>
        <member name="M:COSXML.CosXml.HeadBucket(COSXML.Model.Bucket.HeadBucketRequest,COSXML.Callback.OnSuccessCallback{COSXML.Model.CosResult},COSXML.Callback.OnFailedCallback)">
            <summary>
            asynchronous Head bucket for cos
               //异步方法
               string bucket = "test-1253960454"; //格式：bucketname-appid
               HeadBucketRequest request = new HeadBucketRequest(bucket);
               //设置签名有效时长
               request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               cosXml.HeadBucket(request, 
               	delegate(COSXML.Model.CosResult cosResult)
               	{
               		//请求成功
               		HeadBucketResult result = cosResult as HeadBucketResult;
               		Console.WriteLine(result.GetResultInfo());
               
               	}, 
               	delegate(COSXML.CosException.CosClientException clientEx, COSXML.CosException.CosServerException serverEx)
               	{
               		//请求失败
               		if (clientEx != null)
               		{
               			Console.WriteLine("CosClientException: " + clientEx.Message);
               		}
               		else if (serverEx != null)
               		{
               			Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               		}
               	});
            </summary>
            <param name="request"></param>
            <param name="successCallback"></param>
            <param name="failCallback"></param>
        </member>
        <member name="M:COSXML.CosXml.GetBucket(COSXML.Model.Bucket.GetBucketRequest)">
            <summary>
            Get bucket for cos
               try
               {
               	string bucket = "test-1253960454"; //格式：bucketname-appid
               	GetBucketRequest request = new GetBucketRequest(bucket);
               	//设置签名有效时长
               	request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               	//执行请求
               	GetBucketResult result = cosXml.GetBucket(request);
               	//请求成功
               	Console.WriteLine(result.GetResultInfo());
               }
               catch (COSXML.CosException.CosClientException clientEx)
               {
               	//请求失败
               	Console.WriteLine("CosClientException: " + clientEx.Message);
               }
               catch (COSXML.CosException.CosServerException serverEx)
               {
               	//请求失败
               	Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               }
            </summary>
            <param name="request">GetBucketRequest</param>
            <returns>GetBucketResult</returns>
            <exception cref="T:COSXML.CosException.CosServerException">CosServerException</exception>
            <exception cref="T:COSXML.CosException.CosClientException">CosClientException</exception>
        </member>
        <member name="M:COSXML.CosXml.GetBucket(COSXML.Model.Bucket.GetBucketRequest,COSXML.Callback.OnSuccessCallback{COSXML.Model.CosResult},COSXML.Callback.OnFailedCallback)">
            <summary>
            asynchronous Get bucket for cos
               //异步方法
               string bucket = "test-1253960454"; //格式：bucketname-appid
               GetBucketRequest request = new GetBucketRequest(bucket);
               //设置签名有效时长
               request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               cosXml.GetBucket(request, 
               	delegate(COSXML.Model.CosResult cosResult)
               	{
               		//请求成功
               		GetBucketResult result = cosResult as GetBucketResult;
               		Console.WriteLine(result.GetResultInfo());
               
               	}, 
               	delegate(COSXML.CosException.CosClientException clientEx, COSXML.CosException.CosServerException serverEx)
               	{
               		//请求失败
               		if (clientEx != null)
               		{
               			Console.WriteLine("CosClientException: " + clientEx.Message);
               		}
               		else if (serverEx != null)
               		{
               			Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               		}
               	});
            </summary>
            <param name="request"></param>
            <param name="successCallback"></param>
            <param name="failCallback"></param>
        </member>
        <member name="M:COSXML.CosXml.DeleteBucket(COSXML.Model.Bucket.DeleteBucketRequest)">
            <summary>
            delete bucket for cos
               try
               {
               	string bucket = "test-1253960454"; //格式：bucketname-appid
               	DeleteBucketCORSRequest request = new DeleteBucketCORSRequest(bucket);
               	//设置签名有效时长
               	request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               	//执行请求
               	DeleteBucketCORSResult result = cosXml.DeleteBucketCORS(request);
               	//请求成功
               	Console.WriteLine(result.GetResultInfo());
               }
               catch (COSXML.CosException.CosClientException clientEx)
               {	
               	//请求失败
               	Console.WriteLine("CosClientException: " + clientEx.Message);
               }
               catch (COSXML.CosException.CosServerException serverEx)
               {
               	//请求失败
               	Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               }
            </summary>
            <param name="request">DeleteBucketRequest</param>
            <returns>DeleteBucketResult</returns>
            <exception cref="T:COSXML.CosException.CosServerException">CosServerException</exception>
            <exception cref="T:COSXML.CosException.CosClientException">CosClientException</exception>
        </member>
        <member name="M:COSXML.CosXml.DeleteBucket(COSXML.Model.Bucket.DeleteBucketRequest,COSXML.Callback.OnSuccessCallback{COSXML.Model.CosResult},COSXML.Callback.OnFailedCallback)">
            <summary>
            asynchronous delete bucket for cos
               //异步方法
               string bucket = "test-1253960454"; //格式：bucketname-appid
               DeleteBucketCORSRequest request = new DeleteBucketCORSRequest(bucket);
               //设置签名有效时长
               request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               //执行请求
               cosXml.DeleteBucketCORS(request, 
               	delegate(COSXML.Model.CosResult cosResult)
               	{
               		//请求成功
               		DeleteBucketCORSResult result = cosResult as DeleteBucketCORSResult;
               		Console.WriteLine(result.GetResultInfo());
               
               	}, 
               	delegate(COSXML.CosException.CosClientException clientEx, COSXML.CosException.CosServerException serverEx)
               	{	
               		//请求失败
               		if (clientEx != null)
               		{
               			Console.WriteLine("CosClientException: " + clientEx.Message);
               		}
               		else if (serverEx != null)
               		{
               			Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               		}
               });
            </summary>
            <param name="request"></param>
            <param name="successCallback"></param>
            <param name="failCallback"></param>
        </member>
        <member name="M:COSXML.CosXml.GetBucketLocation(COSXML.Model.Bucket.GetBucketLocationRequest)">
            <summary>
            get bucket location for cos
               try
               {
               	string bucket = "test-1253960454"; //格式：bucketname-appid
               	GetBucketLocationRequest request = new GetBucketLocationRequest(bucket);
               	//设置签名有效时长
               	request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               	//执行请求
               	GetBucketLocationResult result = cosXml.GetBucketLocation(request);
               	//请求成功
               	Console.WriteLine(result.GetResultInfo());
               }
               catch (COSXML.CosException.CosClientException clientEx)
               {	
               	//请求失败
               	Console.WriteLine("CosClientException: " + clientEx.Message);
               }
               catch (COSXML.CosException.CosServerException serverEx)
               {
               	//请求失败
               	Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               }
            </summary>
            <param name="request">GetBucketLocationRequest</param>
            <returns>GetBucketLocationResult</returns>
            <exception cref="T:COSXML.CosException.CosServerException">CosServerException</exception>
            <exception cref="T:COSXML.CosException.CosClientException">CosClientException</exception>
        </member>
        <member name="M:COSXML.CosXml.GetBucketLocation(COSXML.Model.Bucket.GetBucketLocationRequest,COSXML.Callback.OnSuccessCallback{COSXML.Model.CosResult},COSXML.Callback.OnFailedCallback)">
            <summary>
            asynchronous get bucket location
               string bucket = "test-1253960454"; //格式：bucketname-appid
               GetBucketLocationRequest request = new GetBucketLocationRequest(bucket);
               //设置签名有效时长
               request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               cosXml.GetBucketLocation(request, 
               	delegate(COSXML.Model.CosResult cosResult)
               	{
               		//请求成功
               		GetBucketLocationResult result = cosResult as GetBucketLocationResult;
               		Console.WriteLine(result.GetResultInfo());
               
               	}, 
               	delegate(COSXML.CosException.CosClientException clientEx, COSXML.CosException.CosServerException serverEx)
               	{	
               		//请求失败
               		if (clientEx != null)
               		{
               			Console.WriteLine("CosClientException: " + clientEx.Message);
               		}
               		else if (serverEx != null)
               		{
               			Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               		}
               	});
            </summary>
            <param name="request"></param>
            <param name="successCallback"></param>
            <param name="failCallback"></param>
        </member>
        <member name="M:COSXML.CosXml.PutBucketACL(COSXML.Model.Bucket.PutBucketACLRequest)">
            <summary>
            put bucket acl for cos
               try
               {
               	string bucket = "test-1253960454"; //格式：bucketname-appid
               	PutBucketACLRequest request = new PutBucketACLRequest(bucket);
               	//设置签名有效时长
               	request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               	//设置私有读写权限
               	request.SetCosACL(CosACL.PRIVATE);
               	//授予1131975903账号读权限
               	COSXML.Model.Tag.GrantAccount readAccount = new COSXML.Model.Tag.GrantAccount();
               	readAccount.AddGrantAccount("1131975903", "1131975903");
               	request.SetXCosGrantRead(readAccount);
               	//执行请求
               	PutBucketACLResult result = cosXml.PutBucketACL(request);
               	//请求成功
               	Console.WriteLine(result.GetResultInfo());
               }
               catch (COSXML.CosException.CosClientException clientEx)
               {
               	//请求失败
               	Console.WriteLine("CosClientException: " + clientEx.Message);
               }
               catch (COSXML.CosException.CosServerException serverEx)
               {
               	//请求失败
               	Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               }
            </summary>
            <param name="request">PutBucketACLRequest</param>
            <returns>PutBucketACLResult</returns>
            <exception cref="T:COSXML.CosException.CosServerException">CosServerException</exception>
            <exception cref="T:COSXML.CosException.CosClientException">CosClientException</exception>
        </member>
        <member name="M:COSXML.CosXml.PutBucketACL(COSXML.Model.Bucket.PutBucketACLRequest,COSXML.Callback.OnSuccessCallback{COSXML.Model.CosResult},COSXML.Callback.OnFailedCallback)">
            <summary>
            put bucket acl
               //异步方法
               string bucket = "test-1253960454"; //格式：bucketname-appid
               PutBucketACLRequest request = new PutBucketACLRequest(bucket);
               //设置签名有效时长
               request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               //设置私有读写权限
               request.SetCosACL(CosACL.PRIVATE);
               //授予1131975903账号读权限
               COSXML.Model.Tag.GrantAccount readAccount = new COSXML.Model.Tag.GrantAccount();
               readAccount.AddGrantAccount("1131975903", "1131975903");
               request.SetXCosGrantRead(readAccount);
               //执行请求
               cosXml.PutBucketACL(request, 
               	delegate(COSXML.Model.CosResult cosResult)
               	{
               		//请求成功
               		PutBucketACLResult result = cosResult as PutBucketACLResult;
               		Console.WriteLine(result.GetResultInfo());
               
               	}, 
               	delegate(COSXML.CosException.CosClientException clientEx, COSXML.CosException.CosServerException serverEx)
               	{
               		//请求失败
               		if (clientEx != null)
               		{
               			Console.WriteLine("CosClientException: " + clientEx.Message);
               		}
               		else if (serverEx != null)
               		{
               			Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               		}
               	});
            </summary>
            <param name="request"></param>
            <param name="successCallback"></param>
            <param name="failCallback"></param>
        </member>
        <member name="M:COSXML.CosXml.GetBucketACL(COSXML.Model.Bucket.GetBucketACLRequest)">
            <summary>
            get bucket acl for cos
               try
               {
               	string bucket = "test-1253960454"; //格式：bucketname-appid
               	GetBucketACLRequest request = new GetBucketACLRequest(bucket);
               	//设置签名有效时长
               	request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               	//执行请求
               	GetBucketACLResult result = cosXml.GetBucketACL(request);
               	//请求成功
               	Console.WriteLine(result.GetResultInfo());
               }
               catch (COSXML.CosException.CosClientException clientEx)
               {	
               	//请求失败
               	Console.WriteLine("CosClientException: " + clientEx.Message);
               }
               catch (COSXML.CosException.CosServerException serverEx)
               {
               	//请求失败
               	Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               }
            </summary>
            <param name="request">GetBucketACLRequest</param>
            <returns>GetBucketACLResult</returns>
            <exception cref="T:COSXML.CosException.CosServerException">CosServerException</exception>
            <exception cref="T:COSXML.CosException.CosClientException">CosClientException</exception>
        </member>
        <member name="M:COSXML.CosXml.GetBucketACL(COSXML.Model.Bucket.GetBucketACLRequest,COSXML.Callback.OnSuccessCallback{COSXML.Model.CosResult},COSXML.Callback.OnFailedCallback)">
            <summary>
            get bucket acl
               //异步方法
               string bucket = "test-1253960454"; //格式：bucketname-appid
               GetBucketACLRequest request = new GetBucketACLRequest(bucket);
               //设置签名有效时长
               request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               cosXml.GetBucketACL(request, 
               	delegate(COSXML.Model.CosResult cosResult)
               	{
               		//请求成功
               		GetBucketACLResult result = cosResult as GetBucketACLResult;
               		Console.WriteLine(result.GetResultInfo());
               
               	}, 
               	delegate(COSXML.CosException.CosClientException clientEx, COSXML.CosException.CosServerException serverEx)
               	{	
               		//请求失败
               		if (clientEx != null)
               		{
               			Console.WriteLine("CosClientException: " + clientEx.Message);
               		}
               		else if (serverEx != null)
               		{
               			Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               		}
               	});
            </summary>
            <param name="request"></param>
            <param name="successCallback"></param>
            <param name="failCallback"></param>
        </member>
        <member name="M:COSXML.CosXml.DeleteBucketPolicy(COSXML.Model.Bucket.DeleteBucketPolicyRequest)">
            <summary>
            delete bucket policy for cos
            
            </summary>
            <param name="request">DeleteBucketPolicyRequest</param>
            <returns>DeleteBucketPolicyResult</returns>
            <exception cref="T:COSXML.CosException.CosServerException">CosServerException</exception>
            <exception cref="T:COSXML.CosException.CosClientException">CosClientException</exception>
        </member>
        <member name="M:COSXML.CosXml.DeleteBucketPolicy(COSXML.Model.Bucket.DeleteBucketPolicyRequest,COSXML.Callback.OnSuccessCallback{COSXML.Model.CosResult},COSXML.Callback.OnFailedCallback)">
            <summary>
            delete bucket policy for cos
            </summary>
            <param name="request"></param>
            <param name="successCallback"></param>
            <param name="failCallback"></param>
        </member>
        <member name="M:COSXML.CosXml.PutBucketCORS(COSXML.Model.Bucket.PutBucketCORSRequest)">
            <summary>
            put bucket cros for cos
               try
               {
               	string bucket = "test-1253960454"; //格式：bucketname-appid
               	PutBucketCORSRequest request = new PutBucketCORSRequest(bucket);
               	//设置签名有效时长
               	request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               	//设置跨域访问配置CORS
               	COSXML.Model.Tag.CORSConfiguration.CORSRule corsRule = new COSXML.Model.Tag.CORSConfiguration.CORSRule();
               	corsRule.id = "corsconfigureId";
               	corsRule.maxAgeSeconds = 6000;
               	corsRule.allowedOrigin = "http://cloud.tencent.com";
               
               	corsRule.allowedMethods = new List&lt;string&gt;();
               	corsRule.allowedMethods.Add("PUT");
               
               	corsRule.allowedHeaders = new List&lt;string&gt;();
               	corsRule.allowedHeaders.Add("Host");
               
               	corsRule.exposeHeaders = new List&lt;string&gt;();
               	corsRule.exposeHeaders.Add("x-cos-meta-x1");
               
               	request.SetCORSRule(corsRule);
               
               	//执行请求
               	PutBucketCORSResult result = cosXml.PutBucketCORS(request);
               	//请求成功
               	Console.WriteLine(result.GetResultInfo());
               }
               catch (COSXML.CosException.CosClientException clientEx)
               {	
               	//请求失败
                	Console.WriteLine("CosClientException: " + clientEx.Message);
               }
               catch (COSXML.CosException.CosServerException serverEx)
               {
               	//请求失败
               	Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               }
            </summary>
            <param name="request">PutBucketCORSRequest</param>
            <returns>PutBucketCORSResult</returns>
            <exception cref="T:COSXML.CosException.CosServerException">CosServerException</exception>
            <exception cref="T:COSXML.CosException.CosClientException">CosClientException</exception>
        </member>
        <member name="M:COSXML.CosXml.PutBucketCORS(COSXML.Model.Bucket.PutBucketCORSRequest,COSXML.Callback.OnSuccessCallback{COSXML.Model.CosResult},COSXML.Callback.OnFailedCallback)">
            <summary>
            put bucket cors
               //异步方法
               string bucket = "test-1253960454"; //格式：bucketname-appid
               PutBucketCORSRequest request = new PutBucketCORSRequest(bucket);
               //设置签名有效时长
               request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               
               //设置跨域访问配置CORS
               COSXML.Model.Tag.CORSConfiguration.CORSRule corsRule = new COSXML.Model.Tag.CORSConfiguration.CORSRule();
               corsRule.id = "corsconfigureId";
               corsRule.maxAgeSeconds = 6000;
               corsRule.allowedOrigin = "http://cloud.tencent.com";
               
               corsRule.allowedMethods = new List&lt;string&gt;();
               corsRule.allowedMethods.Add("PUT");
               
               corsRule.allowedHeaders = new List&lt;string&gt;();
               corsRule.allowedHeaders.Add("Host");
               
               corsRule.exposeHeaders = new List&lt;string&gt;();
               corsRule.exposeHeaders.Add("x-cos-meta-x1");
               
               request.SetCORSRule(corsRule);
               
               cosXml.PutBucketCORS(request, 
               	delegate(COSXML.Model.CosResult cosResult)
               	{
               		//请求成功
               		PutBucketCORSResult result = cosResult as PutBucketCORSResult;
               		Console.WriteLine(result.GetResultInfo());
               
               	}, 
               	delegate(COSXML.CosException.CosClientException clientEx, COSXML.CosException.CosServerException serverEx)
               	{	
               		//请求失败
               		if (clientEx != null)
               		{
               			Console.WriteLine("CosClientException: " + clientEx.Message);
               		}
               		else if (serverEx != null)
               		{
               			Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               		}
               	});
            </summary>
            <param name="request"></param>
            <param name="successCallback"></param>
            <param name="failCallback"></param>
        </member>
        <member name="M:COSXML.CosXml.GetBucketCORS(COSXML.Model.Bucket.GetBucketCORSRequest)">
            <summary>
            get bucket cros for cos
               try
               {
               	string bucket = "test-1253960454"; //格式：bucketname-appid
               	GetBucketCORSRequest request = new GetBucketCORSRequest(bucket);
               	//设置签名有效时长
               	request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               	//执行请求
               	GetBucketCORSResult result = cosXml.GetBucketCORS(request);
               	//请求成功
               	Console.WriteLine(result.GetResultInfo());
               }
               catch (COSXML.CosException.CosClientException clientEx)
               {	
               	//请求失败
               	Console.WriteLine("CosClientException: " + clientEx.Message);
               }
               catch (COSXML.CosException.CosServerException serverEx)
               {
               	//请求失败
               	Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               }
            </summary>
            <param name="request">GetBucketCORSRequest</param>
            <returns>GetBucketCORSResult</returns>
            <exception cref="T:COSXML.CosException.CosServerException">CosServerException</exception>
            <exception cref="T:COSXML.CosException.CosClientException">CosClientException</exception>
        </member>
        <member name="M:COSXML.CosXml.GetBucketCORS(COSXML.Model.Bucket.GetBucketCORSRequest,COSXML.Callback.OnSuccessCallback{COSXML.Model.CosResult},COSXML.Callback.OnFailedCallback)">
            <summary>
            get bucket cors
               //异步方法
               string bucket = "test-1253960454"; //格式：bucketname-appid
               GetBucketCORSRequest request = new GetBucketCORSRequest(bucket);
               //设置签名有效时长
               request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               //执行请求
               cosXml.GetBucketCORS(request, 
               	delegate(COSXML.Model.CosResult cosResult)
               	{
               		//请求成功
               		GetBucketCORSResult result = cosResult as GetBucketCORSResult;
               		Console.WriteLine(result.GetResultInfo());
               
               	}, 
               	delegate(COSXML.CosException.CosClientException clientEx, COSXML.CosException.CosServerException serverEx)
               	{	
               		//请求失败
               		if (clientEx != null)
               		{
               			Console.WriteLine("CosClientException: " + clientEx.Message);
               		}
               		else if (serverEx != null)
               		{
               			Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               		}
               });
            </summary>
            <param name="request"></param>
            <param name="successCallback"></param>
            <param name="failCallback"></param>
        </member>
        <member name="M:COSXML.CosXml.DeleteBucketCORS(COSXML.Model.Bucket.DeleteBucketCORSRequest)">
            <summary>
            delete bucket cros for cos
               try
               {
               	string bucket = "test-1253960454"; //格式：bucketname-appid
               	DeleteBucketCORSRequest request = new DeleteBucketCORSRequest(bucket);
               	//设置签名有效时长
               	request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               	//执行请求
               	DeleteBucketCORSResult result = cosXml.DeleteBucketCORS(request);
               	//请求成功
               	Console.WriteLine(result.GetResultInfo());
               }
               catch (COSXML.CosException.CosClientException clientEx)
               {	
               	//请求失败
               	Console.WriteLine("CosClientException: " + clientEx.Message);
               }
               catch (COSXML.CosException.CosServerException serverEx)
               {
               	//请求失败
               	Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               }
            </summary>
            <param name="request">DeleteBucketCORSRequest</param>
            <returns>DeleteBucketCORSResult</returns>
            <exception cref="T:COSXML.CosException.CosServerException">CosServerException</exception>
            <exception cref="T:COSXML.CosException.CosClientException">CosClientException</exception>
        </member>
        <member name="M:COSXML.CosXml.DeleteBucketCORS(COSXML.Model.Bucket.DeleteBucketCORSRequest,COSXML.Callback.OnSuccessCallback{COSXML.Model.CosResult},COSXML.Callback.OnFailedCallback)">
            <summary>
            delete bucket cors
               //异步方法
               string bucket = "test-1253960454"; //格式：bucketname-appid
               DeleteBucketCORSRequest request = new DeleteBucketCORSRequest(bucket);
               //设置签名有效时长
               request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               //执行请求
               cosXml.DeleteBucketCORS(request, 
               	delegate(COSXML.Model.CosResult cosResult)
               	{
               		//请求成功
               		DeleteBucketCORSResult result = cosResult as DeleteBucketCORSResult;
               		Console.WriteLine(result.GetResultInfo());
               
               	}, 
               	delegate(COSXML.CosException.CosClientException clientEx, COSXML.CosException.CosServerException serverEx)
               	{	
               		//请求失败
               		if (clientEx != null)
               		{
               			Console.WriteLine("CosClientException: " + clientEx.Message);
               		}
               		else if (serverEx != null)
               		{
               			Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               		}
               });
            </summary>
            <param name="request"></param>
            <param name="successCallback"></param>
            <param name="failCallback"></param>
        </member>
        <member name="M:COSXML.CosXml.PutBucketLifecycle(COSXML.Model.Bucket.PutBucketLifecycleRequest)">
            <summary>
            put bucket lifecycle for cos
               try
               {
               	string bucket = "test-1253960454"; //格式：bucketname-appid
               	PutBucketLifecycleRequest request = new PutBucketLifecycleRequest(bucket);
               	//设置签名有效时长
               	request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               	//设置 lifecycle
               	COSXML.Model.Tag.LifecycleConfiguration.Rule rule = new COSXML.Model.Tag.LifecycleConfiguration.Rule();
               	rule.id = "lfiecycleConfigureId";
               	rule.status = "Enabled"; //Enabled，Disabled
               
               	rule.filter = new COSXML.Model.Tag.LifecycleConfiguration.Filter();
               	rule.filter.prefix = "2/";
               
               	//指定分片过期删除操作
               	rule.abortIncompleteMultiUpload = new COSXML.Model.Tag.LifecycleConfiguration.AbortIncompleteMultiUpload();
               	rule.abortIncompleteMultiUpload.daysAfterInitiation = 2;
               
               	request.SetRule(rule);
               
               	//执行请求
               	PutBucketLifecycleResult result = cosXml.PutBucketLifecycle(request);
               	//请求成功
               	Console.WriteLine(result.GetResultInfo());
               }
               catch (COSXML.CosException.CosClientException clientEx)
               {	
               	//请求失败
               	Console.WriteLine("CosClientException: " + clientEx.Message);
               }
               catch (COSXML.CosException.CosServerException serverEx)
               {
               	//请求失败
               	Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               }
            </summary>
            <param name="request">PutBucketLifecycleRequest</param>
            <returns>PutBucketLifecycleResult</returns>
            <exception cref="T:COSXML.CosException.CosServerException">CosServerException</exception>
            <exception cref="T:COSXML.CosException.CosClientException">CosClientException</exception> 
        </member>
        <member name="M:COSXML.CosXml.PutBucketLifecycle(COSXML.Model.Bucket.PutBucketLifecycleRequest,COSXML.Callback.OnSuccessCallback{COSXML.Model.CosResult},COSXML.Callback.OnFailedCallback)">
            <summary>
            put bucket lifecycle
               //异步方法
               string bucket = "test-1253960454"; //格式：bucketname-appid
               PutBucketLifecycleRequest request = new PutBucketLifecycleRequest(bucket);
               //设置签名有效时长
               request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               //设置 lifecycle
               COSXML.Model.Tag.LifecycleConfiguration.Rule rule = new COSXML.Model.Tag.LifecycleConfiguration.Rule();
               rule.id = "lfiecycleConfigureId";
               rule.status = "Enabled"; //Enabled，Disabled
               
               rule.filter = new COSXML.Model.Tag.LifecycleConfiguration.Filter();
               rule.filter.prefix = "2/";
               
               rule.abortIncompleteMultiUpload = new COSXML.Model.Tag.LifecycleConfiguration.AbortIncompleteMultiUpload();
               rule.abortIncompleteMultiUpload.daysAfterInitiation = 2;
               
               request.SetRule(rule);
               
               //执行请求
               cosXml.PutBucketLifecycle(request, 
               	delegate(COSXML.Model.CosResult cosResult)
               	{
               		//请求成功
               		PutBucketLifecycleResult result = cosResult as PutBucketLifecycleResult;
               		Console.WriteLine(result.GetResultInfo());
               
               	}, 
               	delegate(COSXML.CosException.CosClientException clientEx, COSXML.CosException.CosServerException serverEx)
               	{	
               		//请求失败
               		if (clientEx != null)
               		{
               			Console.WriteLine("CosClientException: " + clientEx.Message);
               		}
               		else if (serverEx != null)
               		{
               			Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               		}
               });
            </summary>
            <param name="request"></param>
            <param name="successCallback"></param>
            <param name="failCallback"></param>
        </member>
        <member name="M:COSXML.CosXml.GetBucketLifecycle(COSXML.Model.Bucket.GetBucketLifecycleRequest)">
            <summary>
            get bucket lifecycle for cos
               try
               {
               	string bucket = "test-1253960454"; //格式：bucketname-appid
               	GetBucketLifecycleRequest request = new GetBucketLifecycleRequest(bucket);
               	//设置签名有效时长
               	request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               	//执行请求
               	GetBucketLifecycleResult result = cosXml.GetBucketLifecycle(request);
               	//请求成功
               	Console.WriteLine(result.GetResultInfo());
               }
               catch (COSXML.CosException.CosClientException clientEx)
               {	
               	//请求失败
               	Console.WriteLine("CosClientException: " + clientEx.Message);
               }
               catch (COSXML.CosException.CosServerException serverEx)
               {
               	//请求失败
               	Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               }
            </summary>
            <param name="request">GetBucketLifecycleRequest</param>
            <returns>GetBucketLifecycleResult</returns>
            <exception cref="T:COSXML.CosException.CosServerException">CosServerException</exception>
            <exception cref="T:COSXML.CosException.CosClientException">CosClientException</exception> 
        </member>
        <member name="M:COSXML.CosXml.GetBucketLifecycle(COSXML.Model.Bucket.GetBucketLifecycleRequest,COSXML.Callback.OnSuccessCallback{COSXML.Model.CosResult},COSXML.Callback.OnFailedCallback)">
            <summary>
            get bucket lifecycle
               //异步方法
               string bucket = "test-1253960454"; //格式：bucketname-appid
               GetBucketLifecycleRequest request = new GetBucketLifecycleRequest(bucket);
               //设置签名有效时长
               request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               //执行请求
               cosXml.GetBucketLifecycle(request, 
               	delegate(COSXML.Model.CosResult cosResult)
               	{
               		//请求成功
               		 GetBucketLifecycleResult result = cosResult as GetBucketLifecycleResult;
               		Console.WriteLine(result.GetResultInfo());
               
               	}, 
               	delegate(COSXML.CosException.CosClientException clientEx, COSXML.CosException.CosServerException serverEx)
               	{	
               		//请求失败
               		if (clientEx != null)
               		{
               			Console.WriteLine("CosClientException: " + clientEx.Message);
               		}
               		else if (serverEx != null)
               		{
               			Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               		}
               });
            </summary>
            <param name="request"></param>
            <param name="successCallback"></param>
            <param name="failCallback"></param>
        </member>
        <member name="M:COSXML.CosXml.DeleteBucketLifecycle(COSXML.Model.Bucket.DeleteBucketLifecycleRequest)">
            <summary>
            delete bucket lifecycle for cos
               try
               {
               	string bucket = "test-1253960454"; //格式：bucketname-appid
               	DeleteBucketLifecycleRequest request = new DeleteBucketLifecycleRequest(bucket);
               	//设置签名有效时长
               	request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               	//执行请求
               	DeleteBucketLifecycleResult result = cosXml.DeleteBucketLifecycle(request);
               	//请求成功
               	Console.WriteLine(result.GetResultInfo());
               }
               catch (COSXML.CosException.CosClientException clientEx)
               {	
               	//请求失败
               	Console.WriteLine("CosClientException: " + clientEx.Message);
               }
               catch (COSXML.CosException.CosServerException serverEx)
               {
               	//请求失败
               	Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               }
            </summary>
            <param name="request">DeleteBucketLifecycleRequest</param>
            <returns>DeleteBucketLifecycleResult</returns>
            <exception cref="T:COSXML.CosException.CosServerException">CosServerException</exception>
            <exception cref="T:COSXML.CosException.CosClientException">CosClientException</exception> 
        </member>
        <member name="M:COSXML.CosXml.DeleteBucketLifecycle(COSXML.Model.Bucket.DeleteBucketLifecycleRequest,COSXML.Callback.OnSuccessCallback{COSXML.Model.CosResult},COSXML.Callback.OnFailedCallback)">
            <summary>
            delete bucket lifecycle
               //异步方法
               string bucket = "test-1253960454"; //格式：bucketname-appid
               DeleteBucketLifecycleRequest request = new DeleteBucketLifecycleRequest(bucket);
               //设置签名有效时长
               request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               //执行请求
               cosXml.DeleteBucketLifecycle(request, 
               	delegate(COSXML.Model.CosResult cosResult)
               	{
               		//请求成功
               		DeleteBucketLifecycleResult result = cosResult as DeleteBucketLifecycleResult;
               		Console.WriteLine(result.GetResultInfo());
               
               	}, 
               	delegate(COSXML.CosException.CosClientException clientEx, COSXML.CosException.CosServerException serverEx)
               	{
               		//请求失败
               		if (clientEx != null)
               		{
               			Console.WriteLine("CosClientException: " + clientEx.Message);
               		}
               		else if (serverEx != null)
               		{
               			Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               		}
               	});
            </summary>
            <param name="request"></param>
            <param name="successCallback"></param>
            <param name="failCallback"></param>
        </member>
        <member name="M:COSXML.CosXml.PutBucketReplication(COSXML.Model.Bucket.PutBucketReplicationRequest)">
            <summary>
            put bucket replication for cos
               try
               {
               	string bucket = "test-1253960454"; //格式：bucketname-appid
               	PutBucketReplicationRequest request = new PutBucketReplicationRequest(bucket);
               	//设置签名有效时长
               	request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               
               	//设置replication
               	PutBucketReplicationRequest.RuleStruct ruleStruct = new PutBucketReplicationRequest.RuleStruct();
               	ruleStruct.appid = "目标存储桶所在 APPID";
               	ruleStruct.bucket = "目标存储桶名称"; //bucketName,不包含 '-appid'
               	ruleStruct.region = "目标存储桶所在地域";
               	ruleStruct.isEnable = true;
               	ruleStruct.storageClass = "目标存储桶对象类型"; //可不填
               	ruleStruct.id = "配置ID";
               	ruleStruct.prefix = "指定复制对象的前缀";
               	List&lt;PutBucketReplicationRequest.RuleStruct&gt;ruleStructs = new List&lt;PutBucketReplicationRequest.RuleStruct&gt;();
               	ruleStructs.Add(ruleStruct);
               	string subUin = "指定子账号的uin"；
               	string ownerUin = "指定根账号的uin";
               	request.SetReplicationConfiguration(ownerUin, subUin, ruleStructs);
               
               	//执行请求
               	PutBucketReplicationResult result = cosXml.PutBucketReplication(request);
               	//请求成功
               	Console.WriteLine(result.GetResultInfo());
               }
               catch (COSXML.CosException.CosClientException clientEx)
               {	
               	//请求失败
               	Console.WriteLine("CosClientException: " + clientEx.Message);
               }
               catch (COSXML.CosException.CosServerException serverEx)
               {
               	//请求失败
               	Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               }
            </summary>
            <param name="request">PutBucketReplicationRequest</param>
            <returns>PutBucketReplicationResult</returns>
            <exception cref="T:COSXML.CosException.CosServerException">CosServerException</exception>
            <exception cref="T:COSXML.CosException.CosClientException">CosClientException</exception> 
        </member>
        <member name="M:COSXML.CosXml.PutBucketReplication(COSXML.Model.Bucket.PutBucketReplicationRequest,COSXML.Callback.OnSuccessCallback{COSXML.Model.CosResult},COSXML.Callback.OnFailedCallback)">
            <summary>
            put bucket replication
               //异步方法
               string bucket = "test-1253960454"; //格式：bucketname-appid
               PutBucketReplicationRequest request = new PutBucketReplicationRequest(bucket);
               //设置签名有效时长
               request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               
               //设置replication
               PutBucketReplicationRequest.RuleStruct ruleStruct = new PutBucketReplicationRequest.RuleStruct();
               ruleStruct.appid = "目标存储桶所在 APPID";
               ruleStruct.bucket = "目标存储桶名称"; //bucketName,不包含 '-appid'
               ruleStruct.region = "目标存储桶所在地域";
               ruleStruct.isEnable = true;
               ruleStruct.storageClass = "目标存储桶对象类型"; //可不填
               ruleStruct.id = "配置ID";
               ruleStruct.prefix = "指定复制对象的前缀";
               List&lt;PutBucketReplicationRequest.RuleStruct&gt;ruleStructs = new List&lt;PutBucketReplicationRequest.RuleStruct&gt;();
               ruleStructs.Add(ruleStruct);
               string subUin = "指定子账号的uin"；
               string ownerUin = "指定根账号的uin";
               request.SetReplicationConfiguration(ownerUin, subUin, ruleStructs);
               
               //执行请求
               cosXml.PutBucketReplication(request, 
               	delegate(COSXML.Model.CosResult cosResult)
               	{
               		//请求成功
               		PutBucketReplicationResult result = cosResult as PutBucketReplicationResult;
               		Console.WriteLine(result.GetResultInfo());
               
               	}, 
               	delegate(COSXML.CosException.CosClientException clientEx, COSXML.CosException.CosServerException serverEx)
               	{	
               		//请求失败
               		if (clientEx != null)
               		{
               			Console.WriteLine("CosClientException: " + clientEx.Message);
               		}
               		else if (serverEx != null)
               		{
               			Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               		}
               });
            </summary>
            <param name="request"></param>
            <param name="successCallback"></param>
            <param name="failCallback"></param>
        </member>
        <member name="M:COSXML.CosXml.GetBucketReplication(COSXML.Model.Bucket.GetBucketReplicationRequest)">
            <summary>
            get bucket replication for cos
               try
               {
               	string bucket = "test-1253960454"; //格式：bucketname-appid
               	GetBucketReplicationRequest request = new GetBucketReplicationRequest(bucket);
               	//设置签名有效时长
               	request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               
               	//执行请求
               	GetBucketReplicationResult result = cosXml.GetBucketReplication(request);
               	//请求成功
               	Console.WriteLine(result.GetResultInfo());
               }
               catch (COSXML.CosException.CosClientException clientEx)
               {	
               	//请求失败
               	Console.WriteLine("CosClientException: " + clientEx.Message);
               }
               catch (COSXML.CosException.CosServerException serverEx)
               {
               	//请求失败
               	Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               }
            </summary>
            <param name="request">GetBucketReplicationRequest</param>
            <returns>GetBucketReplicationResult</returns>
            <exception cref="T:COSXML.CosException.CosServerException">CosServerException</exception>
            <exception cref="T:COSXML.CosException.CosClientException">CosClientException</exception> 
        </member>
        <member name="M:COSXML.CosXml.GetBucketReplication(COSXML.Model.Bucket.GetBucketReplicationRequest,COSXML.Callback.OnSuccessCallback{COSXML.Model.CosResult},COSXML.Callback.OnFailedCallback)">
            <summary>
            get bucket replication
               //异步方法
               string bucket = "test-1253960454"; //格式：bucketname-appid
               GetBucketReplicationRequest request = new GetBucketReplicationRequest(bucket);
               //设置签名有效时长
               request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               
               //执行请求
               cosXml.GetBucketReplication(request, 
               	delegate(COSXML.Model.CosResult cosResult)
               	{
               		//请求成功
               		GetBucketReplicationResult result = cosResult as GetBucketReplicationResult;
               		Console.WriteLine(result.GetResultInfo());
               
               	}, 
               	delegate(COSXML.CosException.CosClientException clientEx, COSXML.CosException.CosServerException serverEx)
               	{	
               		//请求失败
               		if (clientEx != null)
               		{
               			Console.WriteLine("CosClientException: " + clientEx.Message);
               		}
               		else if (serverEx != null)
               		{
               			Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               		}
               });
            </summary>
            <param name="request"></param>
            <param name="successCallback"></param>
            <param name="failCallback"></param>
        </member>
        <member name="M:COSXML.CosXml.DeleteBucketReplication(COSXML.Model.Bucket.DeleteBucketReplicationRequest)">
            <summary>
            delete bucket replication for cos
               try
               {
               	string bucket = "test-1253960454"; //格式：bucketname-appid
               	DeleteBucketReplicationRequest request = new DeleteBucketReplicationRequest(bucket);
               	//设置签名有效时长
               	request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               
               	//执行请求
               	DeleteBucketReplicationResult result = cosXml.DeleteBucketReplication(request);
               	//请求成功
               	Console.WriteLine(result.GetResultInfo());
               }
               catch (COSXML.CosException.CosClientException clientEx)
               {	
               	//请求失败
               	Console.WriteLine("CosClientException: " + clientEx.Message);
               }
               catch (COSXML.CosException.CosServerException serverEx)
               {
               	//请求失败
               	Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               }
            </summary>
            <param name="request">DeleteBucketReplicationRequest</param>
            <returns>DeleteBucketReplicationResult</returns>
            <exception cref="T:COSXML.CosException.CosServerException">CosServerException</exception>
            <exception cref="T:COSXML.CosException.CosClientException">CosClientException</exception> 
        </member>
        <member name="M:COSXML.CosXml.DeleteBucketReplication(COSXML.Model.Bucket.DeleteBucketReplicationRequest,COSXML.Callback.OnSuccessCallback{COSXML.Model.CosResult},COSXML.Callback.OnFailedCallback)">
            <summary>
            delete bucket replication
               //异步方法
               string bucket = "test-1253960454"; //格式：bucketname-appid
               DeleteBucketReplicationRequest request = new DeleteBucketReplicationRequest(bucket);
               //设置签名有效时长
               request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               
               //执行请求
               cosXml.DeleteBucketReplication(request, 
               	delegate(COSXML.Model.CosResult cosResult)
               	{
               		//请求成功
               		DeleteBucketReplicationResult result = cosResult as DeleteBucketReplicationResult;
               		Console.WriteLine(result.GetResultInfo());
               
               	}, 
               	delegate(COSXML.CosException.CosClientException clientEx, COSXML.CosException.CosServerException serverEx)
               	{	
               		//请求失败
               		if (clientEx != null)
               		{
               			Console.WriteLine("CosClientException: " + clientEx.Message);
               		}
               		else if (serverEx != null)
               		{
               			Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               		}
               });
            </summary>
            <param name="request"></param>
            <param name="successCallback"></param>
            <param name="failCallback"></param>
        </member>
        <member name="M:COSXML.CosXml.PutBucketVersioning(COSXML.Model.Bucket.PutBucketVersioningRequest)">
            <summary>
            put bucket versioning for cos
               try
               {
               	string bucket = "test-1253960454"; //格式：bucketname-appid
               	PutBucketVersioningRequest request = new PutBucketVersioningRequest(bucket);
               	//设置签名有效时长
               	request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               	//开启版本控制： true; 不开启： false
               	request.IsEnableVersionConfig(true);
               
               	//执行请求
               	PutBucketVersioningResult result = cosXml.PutBucketVersioning(request);
               	//请求成功
               	Console.WriteLine(result.GetResultInfo());
               }
               catch (COSXML.CosException.CosClientException clientEx)
               {	
               	//请求失败
               	Console.WriteLine("CosClientException: " + clientEx.Message);
               }
               catch (COSXML.CosException.CosServerException serverEx)
               {
               	//请求失败
               	Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               }
            </summary>
            <param name="request">PutBucketVersioningRequest</param>
            <returns>PutBucketVersioningResult</returns>
            <exception cref="T:COSXML.CosException.CosServerException">CosServerException</exception>
            <exception cref="T:COSXML.CosException.CosClientException">CosClientException</exception> 
        </member>
        <member name="M:COSXML.CosXml.PutBucketVersioning(COSXML.Model.Bucket.PutBucketVersioningRequest,COSXML.Callback.OnSuccessCallback{COSXML.Model.CosResult},COSXML.Callback.OnFailedCallback)">
            <summary>
            put bucket versioning
               //异步方法
               string bucket = "test-1253960454"; //格式：bucketname-appid
               PutBucketVersioningRequest request = new PutBucketVersioningRequest(bucket);
               //设置签名有效时长
               request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               
               //开启版本控制： true; 不开启： false
               request.IsEnableVersionConfig(true);
               
               //执行请求
               cosXml.PutBucketVersioning(request, 
               	delegate(COSXML.Model.CosResult cosResult)
               	{
               		//请求成功
               		PutBucketVersioningResult result = cosResult as PutBucketVersioningResult;
               		Console.WriteLine(result.GetResultInfo());
               
               	}, 
               	delegate(COSXML.CosException.CosClientException clientEx, COSXML.CosException.CosServerException serverEx)
               	{	
               		//请求失败
               		if (clientEx != null)
               		{
               			Console.WriteLine("CosClientException: " + clientEx.Message);
               		}
               		else if (serverEx != null)
               		{
               			Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               		}
               });
            </summary>
            <param name="request"></param>
            <param name="successCallback"></param>
            <param name="failCallback"></param>
        </member>
        <member name="M:COSXML.CosXml.GetBucketVersioning(COSXML.Model.Bucket.GetBucketVersioningRequest)">
            <summary>
            get bucket versioning for cos
               try
               {
               	string bucket = "test-1253960454"; //格式：bucketname-appid
               	GetBucketVersioningRequest request = new GetBucketVersioningRequest(bucket);
               	//设置签名有效时长
               	request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               
               	//执行请求
               	GetBucketVersioningResult result = cosXml.GetBucketVersioning(request);
               	//请求成功
               	Console.WriteLine(result.GetResultInfo());
               }
               catch (COSXML.CosException.CosClientException clientEx)
               {	
               	//请求失败
               	Console.WriteLine("CosClientException: " + clientEx.Message);
               }
               catch (COSXML.CosException.CosServerException serverEx)
               {
               	//请求失败
               	Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               }
            </summary>
            <param name="request">GetBucketVersioningRequest</param>
            <returns>GetBucketVersioningResult</returns>
            <exception cref="T:COSXML.CosException.CosServerException">CosServerException</exception>
            <exception cref="T:COSXML.CosException.CosClientException">CosClientException</exception> 
        </member>
        <member name="M:COSXML.CosXml.GetBucketVersioning(COSXML.Model.Bucket.GetBucketVersioningRequest,COSXML.Callback.OnSuccessCallback{COSXML.Model.CosResult},COSXML.Callback.OnFailedCallback)">
            <summary>
            get bucket versions
               //异步方法
               string bucket = "test-1253960454"; //格式：bucketname-appid
               GetBucketVersioningRequest request = new GetBucketVersioningRequest(bucket);
               //设置签名有效时长
               request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               
               //执行请求
               cosXml.GetBucketVersioning(request, 
               	delegate(COSXML.Model.CosResult cosResult)
               	{
               		//请求成功
               		GetBucketVersioningResult result = cosResult as GetBucketVersioningResult;
               		Console.WriteLine(result.GetResultInfo());
               
               	}, 
               	delegate(COSXML.CosException.CosClientException clientEx, COSXML.CosException.CosServerException serverEx)
               	{	
               		//请求失败
               		if (clientEx != null)
               		{
               			Console.WriteLine("CosClientException: " + clientEx.Message);
               		}
               		else if (serverEx != null)
               		{
               			Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               		}
               });
            </summary>
            <param name="request"></param>
            <param name="successCallback"></param>
            <param name="failCallback"></param>
        </member>
        <member name="M:COSXML.CosXml.ListBucketVersions(COSXML.Model.Bucket.ListBucketVersionsRequest)">
            <summary>
            list bucket versions for cos
            </summary>
            <param name="request">ListBucketVersionsRequest</param>
            <returns>ListBucketVersionsResult</returns>
            <exception cref="T:COSXML.CosException.CosServerException">CosServerException</exception>
            <exception cref="T:COSXML.CosException.CosClientException">CosClientException</exception> 
        </member>
        <member name="M:COSXML.CosXml.ListMultiUploads(COSXML.Model.Bucket.ListMultiUploadsRequest)">
            <summary>
            list multiUploads for cos
               try
               {
               	string bucket = "test-1253960454"; //格式：bucketname-appid
               	ListMultiUploadsRequest request = new ListMultiUploadsRequest(bucket);
               	//设置签名有效时长
               	request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               	//执行请求
               	ListMultiUploadsResult result = cosXml.ListMultiUploads(request);
               	//请求成功
               	Console.WriteLine(result.GetResultInfo());
               }
               catch (COSXML.CosException.CosClientException clientEx)
               {	
               	//请求失败
               	Console.WriteLine("CosClientException: " + clientEx.Message);
               }
               catch (COSXML.CosException.CosServerException serverEx)
               {
               	//请求失败
               	Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               }
            </summary>
            <param name="request">ListMultiUploadsRequest</param>
            <returns>ListMultiUploadsResult</returns>
            <exception cref="T:COSXML.CosException.CosServerException">CosServerException</exception>
            <exception cref="T:COSXML.CosException.CosClientException">CosClientException</exception>
        </member>
        <member name="M:COSXML.CosXml.ListMultiUploads(COSXML.Model.Bucket.ListMultiUploadsRequest,COSXML.Callback.OnSuccessCallback{COSXML.Model.CosResult},COSXML.Callback.OnFailedCallback)">
            <summary>
            list multiUploads of bucket
               //异步方法
               string bucket = "test-1253960454"; //格式：bucketname-appid
               ListMultiUploadsRequest request = new ListMultiUploadsRequest(bucket);
               //设置签名有效时长
               request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               //执行请求
               cosXml.ListMultiUploads(request, 
               	delegate(COSXML.Model.CosResult cosResult)
               	{
               		//请求成功
               		ListMultiUploadsResult result = cosResult as ListMultiUploadsResult;
               		Console.WriteLine(result.GetResultInfo());
               
               	}, 
               	delegate(COSXML.CosException.CosClientException clientEx, COSXML.CosException.CosServerException serverEx)
               	{	
               		//请求失败
               		if (clientEx != null)
               		{
               			Console.WriteLine("CosClientException: " + clientEx.Message);
               		}
               		else if (serverEx != null)
               		{
               			Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               		}
               	});
            </summary>
            <param name="request"></param>
            <param name="successCallback"></param>
            <param name="failCallback"></param>
        </member>
        <member name="M:COSXML.CosXml.PutObject(COSXML.Model.Object.PutObjectRequest)">
            <summary>
            put object to cos
               try
               {
               	string bucket = "test-1253960454"; //存储桶，格式：bucketname-appid
               	string key = "test.txt"; //对象在存储桶中的位置，即称对象键.
               	string srcPath = @"F:\test.txt"；//本地文件路径
               	PutObjectRequest request = new PutObjectRequest(bucket, key, srcPath);
               	//设置签名有效时长
               	request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               	//设置进度回调
               	request.SetCosProgressCallback(delegate(long completed, long total)
               	{
               		Console.WriteLine(String.Format("progress = {1:##.##}%", completed * 100.0 / total));
               	});
               	//执行请求
               	PutObjectResult result = cosXml.PutObject(request);
               	//请求成功
               	Console.WriteLine(result.GetResultInfo());
               }
               catch (COSXML.CosException.CosClientException clientEx)
               {	
               	//请求失败
               	Console.WriteLine("CosClientException: " + clientEx.Message);
               }
               catch (COSXML.CosException.CosServerException serverEx)
               {
               	//请求失败
               	Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               }
            </summary>
            <param name="request">PutObjectRequest</param>
            <returns>PutObjectResult</returns>
            <exception cref="T:COSXML.CosException.CosServerException">CosServerException</exception>
            <exception cref="T:COSXML.CosException.CosClientException">CosClientException</exception>
        </member>
        <member name="M:COSXML.CosXml.PutObject(COSXML.Model.Object.PutObjectRequest,COSXML.Callback.OnSuccessCallback{COSXML.Model.CosResult},COSXML.Callback.OnFailedCallback)">
            <summary>
            put object to cos
               //异步方法
               string bucket = "test-1253960454"; //存储桶，格式：bucketname-appid
               string key = "test.txt"; //对象在存储桶中的位置，即称对象键.
               string srcPath = @"F:\test.txt";  //本地文件路径
               PutObjectRequest request = new PutObjectRequest(bucket, key, srcPath);
               //设置签名有效时长
               request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               //设置进度回调
               request.SetCosProgressCallback(delegate(long completed, long total)
               {
               	Console.WriteLine(String.Format("progress = {0:##.##}%", completed * 100.0 / total));
               });
               //执行请求
               cosXml.PutObject(request,
               	delegate(COSXML.Model.CosResult cosResult)
               	{
               		//请求成功
               		PutObjectResult result = cosResult as PutObjectResult;
               		Console.WriteLine(result.GetResultInfo());
               
               	}, 
               	delegate(COSXML.CosException.CosClientException clientEx, COSXML.CosException.CosServerException serverEx)
               	{	
               		//请求失败
               		if (clientEx != null)
               		{
               			Console.WriteLine("CosClientException: " + clientEx.Message);
               		}
               		else if (serverEx != null)
               		{
               			Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               		}
               });
            </summary>
            <param name="request"></param>
            <param name="successCallback"></param>
            <param name="failCallback"></param>
        </member>
        <member name="M:COSXML.CosXml.HeadObject(COSXML.Model.Object.HeadObjectRequest)">
            <summary>
            head object for cos
               try
               {
               	string bucket = "test-1253960454"; //存储桶，格式：bucketname-appid
               	string key = "test.txt"; //对象在存储桶中的位置，即称对象键.
               	HeadObjectRequest request = new HeadObjectRequest(bucket, key);
               	//设置签名有效时长
               	request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               	//执行请求
               	HeadObjectResult result = cosXml.HeadObject(request);
               	//请求成功
               	Console.WriteLine(result.GetResultInfo());
               }
               catch (COSXML.CosException.CosClientException clientEx)
               {	
               	//请求失败
               	Console.WriteLine("CosClientException: " + clientEx.Message);
               }
               catch (COSXML.CosException.CosServerException serverEx)
               {
               	//请求失败
               	Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               }
            </summary>
            <param name="request">HeadObjectRequest</param>
            <returns>HeadObjectResult</returns>
            <exception cref="T:COSXML.CosException.CosServerException">CosServerException</exception>
            <exception cref="T:COSXML.CosException.CosClientException">CosClientException</exception>
        </member>
        <member name="M:COSXML.CosXml.HeadObject(COSXML.Model.Object.HeadObjectRequest,COSXML.Callback.OnSuccessCallback{COSXML.Model.CosResult},COSXML.Callback.OnFailedCallback)">
            <summary>
            head object
               //异步方法
               string bucket = "test-1253960454"; //存储桶，格式：bucketname-appid
               string key = "test.txt"; //对象在存储桶中的位置，即称对象键.
               HeadObjectRequest request = new HeadObjectRequest(bucket, key);
               //设置签名有效时长
               request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               //执行请求
               cosXml.HeadObject(request,
               	delegate(COSXML.Model.CosResult cosResult)
               	{
               		//请求成功
               		HeadObjectResult result = cosResult as HeadObjectResult;
               		Console.WriteLine(result.GetResultInfo());
               
               	}, 
               	delegate(COSXML.CosException.CosClientException clientEx, COSXML.CosException.CosServerException serverEx)
               	{	
               		//请求失败
               		if (clientEx != null)
               		{
               			Console.WriteLine("CosClientException: " + clientEx.Message);
               		}
               		else if (serverEx != null)
               		{
               			Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               		}
               });
            </summary>
            <param name="request"></param>
            <param name="successCallback"></param>
            <param name="failCallback"></param>
        </member>
        <member name="M:COSXML.CosXml.GetObject(COSXML.Model.Object.GetObjectRequest)">
            <summary>
            get object for cos
               try
               {
               	string bucket = "test-1253960454"; //存储桶，格式：bucketname-appid
               	string key = "test.txt"; //对象在存储桶中的位置，即称对象键.
               	string localDir = @"F:\"；//下载到本地指定文件夹
               	string localFileName = "test.txt"; //指定本地保存的文件名
               	GetObjectRequest request = new GetObjectRequest(bucket, key, localDir, localFileName);
               	//设置签名有效时长
               	request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               	//设置进度回调
               	request.SetCosProgressCallback(delegate(long completed, long total)
               	{
               		Console.WriteLine(String.Format("progress = {1:##.##}%", completed * 100.0 / total));
               	});
               	//执行请求
               	GetObjectResult result = cosXml.GetObject(request);
               	//请求成功
               	Console.WriteLine(result.GetResultInfo());
               }
               catch (COSXML.CosException.CosClientException clientEx)
               {	
               	//请求失败
                	Console.WriteLine("CosClientException: " + clientEx.Message);
               }
               catch (COSXML.CosException.CosServerException serverEx)
               {
               	//请求失败
               	Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               }
            </summary>
            <param name="request">GetObjectRequest</param>
            <returns>GetObjectResult</returns>
            <exception cref="T:COSXML.CosException.CosServerException">CosServerException</exception>
            <exception cref="T:COSXML.CosException.CosClientException">CosClientException</exception>
        </member>
        <member name="M:COSXML.CosXml.GetObject(COSXML.Model.Object.GetObjectRequest,COSXML.Callback.OnSuccessCallback{COSXML.Model.CosResult},COSXML.Callback.OnFailedCallback)">
            <summary>
            get object
               //异步方法
               string bucket = "test-1253960454"; //存储桶，格式：bucketname-appid
               string key = "test.txt"; //对象在存储桶中的位置，即称对象键.
               string localDir = @"F:\"；//下载到本地指定文件夹
               string localFileName = "test.txt"; //指定本地保存的文件名
               GetObjectRequest request = new GetObjectRequest(bucket, key, localDir, localFileName);
               //设置签名有效时长
               request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               //设置进度回调
               request.SetCosProgressCallback(delegate(long completed, long total)
               {
               	Console.WriteLine(String.Format("progress = {1:##.##}%", completed * 100.0 / total));
               });
               //执行请求
               cosXml.GetObject(request,
               	delegate(COSXML.Model.CosResult cosResult)
               	{
               		//请求成功
               		GetObjectResult result = cosResult as GetObjectResult;
               		Console.WriteLine(result.GetResultInfo());
               
               	}, 
               	delegate(COSXML.CosException.CosClientException clientEx, COSXML.CosException.CosServerException serverEx)
               	{	
               		//请求失败
               		if (clientEx != null)
               		{
               			Console.WriteLine("CosClientException: " + clientEx.Message);
               		}
               		else if (serverEx != null)
               		{
               			Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               		}
               });
            </summary>
            <param name="request"></param>
            <param name="successCallback"></param>
            <param name="failCallback"></param>
        </member>
        <member name="M:COSXML.CosXml.PutObjectACL(COSXML.Model.Object.PutObjectACLRequest)">
            <summary>
            put object acl for cos
               try
               {
               	string bucket = "test-1253960454"; //存储桶，格式：bucketname-appid
               	string key = "test.txt"; //对象在存储桶中的位置，即称对象键.
               	PutObjectACLRequest request = new PutObjectACLRequest(bucket, key);
               	//设置签名有效时长
               	request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               	//设置私有读写权限 
               	request.SetCosACL(CosACL.PRIVATE); 
               	//授予1131975903账号读权限 
               	COSXML.Model.Tag.GrantAccount readAccount = new COSXML.Model.Tag.GrantAccount(); 
               	readAccount.AddGrantAccount("1131975903", "1131975903"); 
               	request.setXCosGrantRead(readAccount);
               	//执行请求
               	PutObjectACLResult result = cosXml.PutObjectACL(request);
               	//请求成功
               	Console.WriteLine(result.GetResultInfo());
               }
               catch (COSXML.CosException.CosClientException clientEx)
               {	
               	//请求失败
               	Console.WriteLine("CosClientException: " + clientEx.Message);
               }
               catch (COSXML.CosException.CosServerException serverEx)
               {
               	//请求失败
               	Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               }
            </summary>
            <param name="request">PutObjectACLRequest</param>
            <returns>PutObjectACLResult</returns>
            <exception cref="T:COSXML.CosException.CosServerException">CosServerException</exception>
            <exception cref="T:COSXML.CosException.CosClientException">CosClientException</exception>
        </member>
        <member name="M:COSXML.CosXml.PutObjectACL(COSXML.Model.Object.PutObjectACLRequest,COSXML.Callback.OnSuccessCallback{COSXML.Model.CosResult},COSXML.Callback.OnFailedCallback)">
            <summary>
            put object acl
               //异步方法
               string bucket = "test-1253960454"; //存储桶，格式：bucketname-appid
               string key = "test.txt"; //对象在存储桶中的位置，即称对象键.
               PutObjectACLRequest request = new PutObjectACLRequest(bucket, key);
               //设置签名有效时长
               request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               //设置私有读写权限 
               request.SetCosACL(CosACL.PRIVATE); 
               //授予1131975903账号读权限 
               COSXML.Model.Tag.GrantAccount readAccount = new COSXML.Model.Tag.GrantAccount(); 
               readAccount.AddGrantAccount("1131975903", "1131975903"); 
               request.setXCosGrantRead(readAccount);
               //执行请求
               cosXml.PutObjectACL(request,
               	delegate(COSXML.Model.CosResult cosResult)
               	{
               		//请求成功
               		PutObjectACLResult result = cosResult as PutObjectACLResult;
               		Console.WriteLine(result.GetResultInfo());
               
               	}, 
               	delegate(COSXML.CosException.CosClientException clientEx, COSXML.CosException.CosServerException serverEx)
               	{	
               		//请求失败
               		if (clientEx != null)
               		{
               			Console.WriteLine("CosClientException: " + clientEx.Message);
               		}
               		else if (serverEx != null)
               		{
               			Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               		}
               });
            </summary>
            <param name="request"></param>
            <param name="successCallback"></param>
            <param name="failCallback"></param>
        </member>
        <member name="M:COSXML.CosXml.GetObjectACL(COSXML.Model.Object.GetObjectACLRequest)">
            <summary>
            get object acl for cos
               try
               {
               	string bucket = "test-1253960454"; //存储桶，格式：bucketname-appid
               	string key = "test.txt"; //对象在存储桶中的位置，即称对象键.
               	GetObjectACLRequest request = new GetObjectACLRequest(bucket, key);
               	//设置签名有效时长
               	request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               	//执行请求
               	GetObjectACLResult result = cosXml.GetObjectACL(request);
               	//请求成功
                   Console.WriteLine(result.GetResultInfo());
               }
               catch (COSXML.CosException.CosClientException clientEx)
               {	
               	//请求失败
               	Console.WriteLine("CosClientException: " + clientEx.Message);
               }
               catch (COSXML.CosException.CosServerException serverEx)
               {
               	//请求失败
               	Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               }
            </summary>
            <param name="request">GetObjectACLRequest</param>
            <returns>GetObjectACLResult</returns>
            <exception cref="T:COSXML.CosException.CosServerException">CosServerException</exception>
            <exception cref="T:COSXML.CosException.CosClientException">CosClientException</exception>
        </member>
        <member name="M:COSXML.CosXml.GetObjectACL(COSXML.Model.Object.GetObjectACLRequest,COSXML.Callback.OnSuccessCallback{COSXML.Model.CosResult},COSXML.Callback.OnFailedCallback)">
            <summary>
            get object acl
               //异步方法
               string bucket = "test-1253960454"; //存储桶，格式：bucketname-appid
               string key = "test.txt"; //对象在存储桶中的位置，即称对象键.
               GetObjectACLRequest request = new GetObjectACLRequest(bucket, key);
               //设置签名有效时长
               request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               //执行请求
               cosXml.GetObjectACL(request,
               	delegate(COSXML.Model.CosResult cosResult)
               	{
               		//请求成功
               		GetObjectACLResult result = cosResult as GetObjectACLResult;
               		Console.WriteLine(result.GetResultInfo());
               
               	}, 
               	delegate(COSXML.CosException.CosClientException clientEx, COSXML.CosException.CosServerException serverEx)
               	{	
               		//请求失败
               		if (clientEx != null)
               		{
               			Console.WriteLine("CosClientException: " + clientEx.Message);
               		}
               		else if (serverEx != null)
               		{
               			Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               		}
               });
            </summary>
            <param name="request"></param>
            <param name="successCallback"></param>
            <param name="failCallback"></param>
        </member>
        <member name="M:COSXML.CosXml.DeleteObject(COSXML.Model.Object.DeleteObjectRequest)">
            <summary>
            delete object for cos
               try
               {
               	string bucket = "test-1253960454"; //存储桶，格式：bucketname-appid
               	string key = "test.txt"; //对象在存储桶中的位置，即称对象键.
               	DeleteObjectRequest request = new DeleteObjectRequest(bucket, key);
               	//设置签名有效时长
               	request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               	//执行请求
               	DeleteObjectResult result = cosXml.DeleteObject(request);
               	//请求成功
               	Console.WriteLine(result.GetResultInfo());
               }
               catch (COSXML.CosException.CosClientException clientEx)
               {	
               	//请求失败
               	Console.WriteLine("CosClientException: " + clientEx.Message);
               }
               catch (COSXML.CosException.CosServerException serverEx)
               {
               	//请求失败
               	Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               }
            </summary>
            <param name="request">DeleteObjectRequest</param>
            <returns>DeleteObjectResult</returns>
            <exception cref="T:COSXML.CosException.CosServerException">CosServerException</exception>
            <exception cref="T:COSXML.CosException.CosClientException">CosClientException</exception>
        </member>
        <member name="M:COSXML.CosXml.DeleteObject(COSXML.Model.Object.DeleteObjectRequest,COSXML.Callback.OnSuccessCallback{COSXML.Model.CosResult},COSXML.Callback.OnFailedCallback)">
            <summary>
            delete object
               //异步方法
               string bucket = "test-1253960454"; //存储桶，格式：bucketname-appid
               string key = "test.txt"; //对象在存储桶中的位置，即称对象键.
               DeleteObjectRequest request = new DeleteObjectRequest(bucket, key);
               //设置签名有效时长
               request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               //执行请求
               cosXml.DeleteObject(request,
               	delegate(COSXML.Model.CosResult cosResult)
               	{
               		//请求成功
               		DeleteObjectResult getObjectResult = result as DeleteObjectResult;
               		Console.WriteLine(result.GetResultInfo());
               
               	}, 
               	delegate(COSXML.CosException.CosClientException clientEx, COSXML.CosException.CosServerException serverEx)
               	{	
               		//请求失败
               		if (clientEx != null)
               		{
               			Console.WriteLine("CosClientException: " + clientEx.Message);
               		}
               		else if (serverEx != null)
               		{
               			Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               		}
               });
            </summary>
            <param name="request"></param>
            <param name="successCallback"></param>
            <param name="failCallback"></param>
        </member>
        <member name="M:COSXML.CosXml.DeleteMultiObjects(COSXML.Model.Object.DeleteMultiObjectRequest)">
            <summary>
            delete multi objects for cos
               try
               {
               	string bucket = "test-1253960454"; //存储桶，格式：bucketname-appid
               	DeleteMultiObjectRequest request = new DeleteMultiObjectRequest(bucket);
               	//设置签名有效时长
               	request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               	//设置返回结果形式
               	request.SetDeleteQuiet(false);
               	//删除多个对象
               	List&lt;string&gt; keys = new List&lt;string&gt;();
               	keys.Add("test1.txt");
               	keys.Add("test2.txt");
               	request.SetObjectKeys(keys);
               	//执行请求
               	DeleteMultiObjectResult result = cosXml.DeleteMultiObjects(request);
               	//请求成功
               	Console.WriteLine(result.GetResultInfo());
               }
               catch (COSXML.CosException.CosClientException clientEx)
               {	
               	//请求失败
               	Console.WriteLine("CosClientException: " + clientEx.Message);
               }
               catch (COSXML.CosException.CosServerException serverEx)
               {
               	//请求失败
               	Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               }
            </summary>
            <param name="request">DeleteMultiObjectRequest</param>
            <returns>DeleteMultiObjectResult</returns>
            <exception cref="T:COSXML.CosException.CosServerException">CosServerException</exception>
            <exception cref="T:COSXML.CosException.CosClientException">CosClientException</exception>
        </member>
        <member name="M:COSXML.CosXml.DeleteMultiObjects(COSXML.Model.Object.DeleteMultiObjectRequest,COSXML.Callback.OnSuccessCallback{COSXML.Model.CosResult},COSXML.Callback.OnFailedCallback)">
            <summary>
            delete multi objects
               //异步方法
               string bucket = "test-1253960454"; //存储桶，格式：bucketname-appid
               DeleteMultiObjectRequest request = new DeleteMultiObjectRequest(bucket);
               //设置签名有效时长
               request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               //设置返回结果形式
               request.SetDeleteQuiet(false);
               //删除多个对象
               	List&lt;string&gt; keys = new List&lt;string&gt;();
               keys.Add("test1.txt");
               keys.Add("test2.txt");
               request.SetObjectKeys(keys);
               
               //执行请求
               cosXml.DeleteMultiObjects(request,
               	delegate(COSXML.Model.CosResult cosResult)
               	{
               		//请求成功
               		DeleteMultiObjectResult result = cosResult as DeleteMultiObjectResult;
               		Console.WriteLine(result.GetResultInfo());
               
               	}, 
               	delegate(COSXML.CosException.CosClientException clientEx, COSXML.CosException.CosServerException serverEx)
               	{	
               		//请求失败
               		if (clientEx != null)
               		{
               			Console.WriteLine("CosClientException: " + clientEx.Message);
               		}
               		else if (serverEx != null)
               		{
               			Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               		}
               });
            </summary>
            <param name="request"></param>
            <param name="successCallback"></param>
            <param name="failCallback"></param>
        </member>
        <member name="M:COSXML.CosXml.InitMultipartUpload(COSXML.Model.Object.InitMultipartUploadRequest)">
            <summary>
            init multiupload for a object to cos
               try
               {
               	string bucket = "test-1253960454"; //存储桶，格式：bucketname-appid
               	string key = "test.txt"; //对象在存储桶中的位置，即称对象键.
               	InitMultipartUploadRequest request = new InitMultipartUploadRequest(bucket, key);
               	//设置签名有效时长
               	request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               	//执行请求
               	InitMultipartUploadResult result = cosXml.InitMultipartUpload(request);
               	//请求成功
               	string uploadId = result.initMultipartUpload.uploadId; //用于后续分片上传的 uploadId
               	Console.WriteLine(result.GetResultInfo());
               }
               catch (COSXML.CosException.CosClientException clientEx)
               {	
               	//请求失败
               	Console.WriteLine("CosClientException: " + clientEx.Message);
               }
               catch (COSXML.CosException.CosServerException serverEx)
               {
               	//请求失败
               	Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               }
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:COSXML.CosXml.InitMultipartUpload(COSXML.Model.Object.InitMultipartUploadRequest,COSXML.Callback.OnSuccessCallback{COSXML.Model.CosResult},COSXML.Callback.OnFailedCallback)">
            <summary>
            init init multiupload for a object 
               //异步方法
               string bucket = "test-1253960454"; //存储桶，格式：bucketname-appid
               string key = "test.txt"; //对象在存储桶中的位置，即称对象键.
               InitMultipartUploadRequest request = new InitMultipartUploadRequest(bucket, key);
               //设置签名有效时长
               request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               //执行请求
               cosXml.InitMultipartUpload(request,
               	delegate(COSXML.Model.CosResult cosResult)
               	{
               		//请求成功
               		InitMultipartUploadResult result = cosResult as InitMultipartUploadResult;
               		string uploadId = result.initMultipartUpload.uploadId; //用于后续分片上传的 uploadId
               		Console.WriteLine(result.GetResultInfo());
               
               	}, 
               	delegate(COSXML.CosException.CosClientException clientEx, COSXML.CosException.CosServerException serverEx)
               	{	
               		//请求失败
               		if (clientEx != null)
               		{
               			Console.WriteLine("CosClientException: " + clientEx.Message);
               		}
               		else if (serverEx != null)
               		{
               			Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               		}
               });
            </summary>
            <param name="request"></param>
            <param name="successCallback"></param>
            <param name="failCallback"></param>
        </member>
        <member name="M:COSXML.CosXml.ListParts(COSXML.Model.Object.ListPartsRequest)">
            <summary>
            list all has been uploaded parts of a object for cos
               try
               {
               	string bucket = "test-1253960454"; //存储桶，格式：bucketname-appid
               	string key = "test.txt"; //对象在存储桶中的位置，即称对象键.
               	string uploadId ="xxxxxxxx"; //初始化分片上传返回的uploadId
               	ListPartsRequest request = new ListPartsRequest(bucket, key, uploadId);
               	//设置签名有效时长
               	request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               	//执行请求
               	ListPartsResult result = cosXml.ListParts(request);
               	//请求成功
               	//列举已上传的分片块
               	List&lt;COSXML.Model.Tag.ListParts.Part&gt; alreadyUploadParts = result.listParts.parts;
               	Console.WriteLine(result.GetResultInfo());
               }
               catch (COSXML.CosException.CosClientException clientEx)
               {	
               	//请求失败
               	Console.WriteLine("CosClientException: " + clientEx.Message);
               }
               catch (COSXML.CosException.CosServerException serverEx)
               {
               	//请求失败
               	Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               }
            </summary>
            <param name="request">ListPartsRequest</param>
            <returns>ListPartsResult</returns>
            <exception cref="T:COSXML.CosException.CosServerException">CosServerException</exception>
            <exception cref="T:COSXML.CosException.CosClientException">CosClientException</exception>
        </member>
        <member name="M:COSXML.CosXml.ListParts(COSXML.Model.Object.ListPartsRequest,COSXML.Callback.OnSuccessCallback{COSXML.Model.CosResult},COSXML.Callback.OnFailedCallback)">
            <summary>
            list all has been uploaded parts of a object for cos
               //异步方法
               string bucket = "test-1253960454"; //存储桶，格式：bucketname-appid
               string key = "test.txt"; //对象在存储桶中的位置，即称对象键.
               string uploadId ="xxxxxxxx"; //初始化分片上传返回的uploadId
               ListPartsRequest request = new ListPartsRequest(bucket, key, uploadId);
               //设置签名有效时长
               request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               //执行请求
               cosXml.ListParts(request,
               	delegate(COSXML.Model.CosResult cosResult)
               	{
               		//请求成功
               		ListPartsResult result = cosResult as ListPartsResult;
               		//列举已上传的分片块
               		List&lt;COSXML.Model.Tag.ListParts.Part&gt; alreadyUploadParts = result.listParts.parts;
               		Console.WriteLine(result.GetResultInfo());
               
               	}, 
               	delegate(COSXML.CosException.CosClientException clientEx, COSXML.CosException.CosServerException serverEx)
               	 {	
               		//请求失败
               		if (clientEx != null)
               		{
               			Console.WriteLine("CosClientException: " + clientEx.Message);
               		}
               		else if (serverEx != null)
               		{
               			Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               		}
               });
            </summary>
            <param name="request"></param>
            <param name="successCallback"></param>
            <param name="failCallback"></param>
        </member>
        <member name="M:COSXML.CosXml.UploadPart(COSXML.Model.Object.UploadPartRequest)">
            <summary>
            upload a part of a object to cos
               try
               {
               	string bucket = "test-1253960454"; //存储桶，格式：bucketname-appid
               	string key = "test.txt"; //对象在存储桶中的位置，即称对象键.
               	string uploadId ="xxxxxxxx"; //初始化分片上传返回的uploadId
               	int partNumber = 1; //分片块编号，必须从1开始递增
               	string srcPath = @"F:\test.txt"; //本地文件路径
               	UploadPartRequest request = new UploadPartRequest(bucket, key, partNumber, uploadId, srcPath);
               	//设置签名有效时长
               	request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               	//设置进度回调
               	request.SetCosProgressCallback(delegate(long completed, long total)
               	{
               		Console.WriteLine(String.Format("progress = {0:##.##}%",  completed * 100.0 / total));
               	});
               	//执行请求
               	UploadPartResult result = cosXml.UploadPart(request);
               	//请求成功
               	//获取返回分片块的eTag,用于后续CompleteMultiUploads
               	string eTag = result.eTag;
               	Console.WriteLine(result.GetResultInfo());
               }
               catch (COSXML.CosException.CosClientException clientEx)
               {	
               	//请求失败
               	Console.WriteLine("CosClientException: " + clientEx.Message);
               }
               catch (COSXML.CosException.CosServerException serverEx)
               {
               	//请求失败
               	Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               }
            </summary>
            <param name="request">UploadPartRequest</param>
            <returns>UploadPartResult</returns>
            <exception cref="T:COSXML.CosException.CosServerException">CosServerException</exception>
            <exception cref="T:COSXML.CosException.CosClientException">CosClientException</exception>
        </member>
        <member name="M:COSXML.CosXml.UploadPart(COSXML.Model.Object.UploadPartRequest,COSXML.Callback.OnSuccessCallback{COSXML.Model.CosResult},COSXML.Callback.OnFailedCallback)">
            <summary>
            upload a part of a object
               //异步方法
               string bucket = "test-1253960454"; //存储桶，格式：bucketname-appid
               string key = "test.txt"; //对象在存储桶中的位置，即称对象键.
               string uploadId ="xxxxxxxx"; //初始化分片上传返回的uploadId
               int partNumber = 1; //分片块编号，必须从1开始递增
               string srcPath = @"F:\test.txt"; //本地文件路径
               UploadPartRequest request = new UploadPartRequest(bucket, key, partNumber, uploadId, srcPath);
               //设置签名有效时长
               request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               //设置进度回调
               request.SetCosProgressCallback(delegate(long completed, long total)
               {
               	Console.WriteLine(String.Format("progress = {0:##.##}%",  completed * 100.0 / total));
               });
               //执行请求
               cosXml.UploadPart(request,
               	delegate(COSXML.Model.CosResult cosResult)
               	{
               		//请求成功
               		UploadPartResult result = cosResult as UploadPartResult;
               		//获取返回分片块的eTag,用于后续CompleteMultiUploads
               		string eTag = result.eTag;
               		Console.WriteLine(result.GetResultInfo());
               
               	}, 
               	delegate(COSXML.CosException.CosClientException clientEx, COSXML.CosException.CosServerException serverEx)
               	{	
               		//请求失败
               		if (clientEx != null)
               		{
               			Console.WriteLine("CosClientException: " + clientEx.Message);
               		}
               		else if (serverEx != null)
               		{
               			Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               		}
               });
            </summary>
            <param name="request"></param>
            <param name="successCallback"></param>
            <param name="failCallback"></param>
        </member>
        <member name="M:COSXML.CosXml.CompleteMultiUpload(COSXML.Model.Object.CompleteMultipartUploadRequest)">
            <summary>
            complete all parts of a object for cos 
               try
               {
               	string bucket = "test-1253960454"; //存储桶，格式：bucketname-appid
               	string key = "test.txt"; //对象在存储桶中的位置，即称对象键.
               	string uploadId ="xxxxxxxx"; //初始化分片上传返回的uploadId
               	CompleteMultipartUploadRequest request = new CompleteMultipartUploadRequest(bucket, key, uploadId);
               	//设置签名有效时长
               	request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               	//设置已上传的parts,必须有序，按照partNumber递增
               	request.SetPartNumberAndETag(1, "partNumber1 eTag");
               	//执行请求
               	CompleteMultipartUploadResult result = cosXml.CompleteMultiUpload(request);
               	//请求成功
               	Console.WriteLine(result.GetResultInfo());
               }
               catch (COSXML.CosException.CosClientException clientEx)
               {	
               	//请求失败
               	Console.WriteLine("CosClientException: " + clientEx.Message);
               }
               catch (COSXML.CosException.CosServerException serverEx)
               {
               	//请求失败
               	Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               }
            </summary>
            <param name="request">CompleteMultiUploadRequest</param>
            <returns>CompleteMultiUploadResult</returns>
            <exception cref="T:COSXML.CosException.CosServerException">CosServerException</exception>
            <exception cref="T:COSXML.CosException.CosClientException">CosClientException</exception>
        </member>
        <member name="M:COSXML.CosXml.CompleteMultiUpload(COSXML.Model.Object.CompleteMultipartUploadRequest,COSXML.Callback.OnSuccessCallback{COSXML.Model.CosResult},COSXML.Callback.OnFailedCallback)">
            <summary>
            complete all parts of a object
               //异步方法
               string bucket = "test-1253960454"; //存储桶，格式：bucketname-appid
               string key = "test.txt"; //对象在存储桶中的位置，即称对象键.
               string uploadId ="xxxxxxxx"; //初始化分片上传返回的uploadId
               CompleteMultipartUploadRequest request = new CompleteMultipartUploadRequest(bucket, key, uploadId);
               //设置签名有效时长
               request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               //设置已上传的parts,必须有序，按照partNumber递增
               request.SetPartNumberAndETag(1, "partNumber1 eTag");
               //执行请求
               cosXml.CompleteMultiUpload(request,
               	delegate(COSXML.Model.CosResult cosResult)
               	{
               		//请求成功
               		CompleteMultipartUploadResult result = result as CompleteMultipartUploadResult;
               		Console.WriteLine(result.GetResultInfo());
               
               	}, 
               	delegate(COSXML.CosException.CosClientException clientEx, COSXML.CosException.CosServerException serverEx)
                  {	
               		//请求失败
               		if (clientEx != null)
               		{
               			Console.WriteLine("CosClientException: " + clientEx.Message);
               		}
               		else if (serverEx != null)
               		{
               			Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               		}
               	});
            </summary>
            <param name="request"></param>
            <param name="successCallback"></param>
            <param name="failCallback"></param>
        </member>
        <member name="M:COSXML.CosXml.AbortMultiUpload(COSXML.Model.Object.AbortMultipartUploadRequest)">
            <summary>
            abort has been parts of a object in cos
               try
               {
               	string bucket = "test-1253960454"; //存储桶，格式：bucketname-appid
               	string key = "test.txt"; //对象在存储桶中的位置，即称对象键.
               	string uploadId ="xxxxxxxx"; //初始化分片上传返回的uploadId
               	AbortMultipartUploadRequest request = new AbortMultipartUploadRequest(bucket, key, uploadId);
               	//设置签名有效时长
               	request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               	//执行请求
               	AbortMultipartUploadResult result = cosXml.AbortMultiUpload(request);
               	//请求成功
               	Console.WriteLine(result.GetResultInfo());
               }
               catch (COSXML.CosException.CosClientException clientEx)
               {	
               	//请求失败
               	Console.WriteLine("CosClientException: " + clientEx.Message);
               }
               catch (COSXML.CosException.CosServerException serverEx)
               {
               	//请求失败
               	Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               }
            </summary>
            <param name="request">AbortMultiUploadRequest</param>
            <returns>AbortMultiUploadResult</returns>
            <exception cref="T:COSXML.CosException.CosServerException">CosServerException</exception>
            <exception cref="T:COSXML.CosException.CosClientException">CosClientException</exception>
        </member>
        <member name="M:COSXML.CosXml.AbortMultiUpload(COSXML.Model.Object.AbortMultipartUploadRequest,COSXML.Callback.OnSuccessCallback{COSXML.Model.CosResult},COSXML.Callback.OnFailedCallback)">
            <summary>
            abort has been parts of a object
               //异步方法
               string bucket = "test-1253960454"; //存储桶，格式：bucketname-appid
               string key = "test.txt"; //对象在存储桶中的位置，即称对象键.
               string uploadId ="xxxxxxxx"; //初始化分片上传返回的uploadId
               AbortMultipartUploadRequest request = new AbortMultipartUploadRequest(bucket, key, uploadId);
               //设置签名有效时长
               request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               //执行请求
               cosXml.AbortMultiUpload(request,
               	delegate(COSXML.Model.CosResult cosResult)
               	{
               		//请求成功
               		AbortMultipartUploadResult result = result as AbortMultipartUploadResult;
               		Console.WriteLine(result.GetResultInfo());
               
               	}, 
               	delegate(COSXML.CosException.CosClientException clientEx, COSXML.CosException.CosServerException serverEx)
               	{	
               		//请求失败
               		if (clientEx != null)
               		{
               			Console.WriteLine("CosClientException: " + clientEx.Message);
               		}
               		else if (serverEx != null)
               		{
               			Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               		}
               });
            </summary>
            <param name="request"></param>
            <param name="successCallback"></param>
            <param name="failCallback"></param>
        </member>
        <member name="M:COSXML.CosXml.CopyObject(COSXML.Model.Object.CopyObjectRequest)">
            <summary>
            copy object to another object for cos
               try
               {
               	string sourceAppid = "1253960454"; //账号 appid
               	string sourceBucket = "source-1253960454"; //"源对象所在的存储桶
               	string sourceRegion = "ap-beijing"; //源对象的存储桶所在的地域
               	string sourceKey = "test.txt"; //源对象键
               	//构造源对象属性
               	COSXML.Model.Tag.CopySourceStruct copySource = new CopySourceStruct(sourceAppid, sourceBucket, sourceRegion, sourceKey);
               
               	string bucket = "test-1253960454"; //存储桶，格式：bucketname-appid
               	string key = "copy_test.txt"; //对象在存储桶中的位置，即称对象键.
               	CopyObjectRequest request =  new CopyObjectRequest(bucket, key);
               	//设置签名有效时长
               	request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               	//设置拷贝源
               	request.SetCopySource(copySource);
               	//设置是否拷贝还是更新,此处是拷贝
               	request.SetCopyMetaDataDirective(COSXML.Common.CosMetaDataDirective.COPY);
               	//执行请求
               	CopyObjectResult result = cosXml.CopyObject(request);
               	//请求成功
               	Console.WriteLine(result.GetResultInfo());
               }
               catch (COSXML.CosException.CosClientException clientEx)
               {	
               	//请求失败
               	Console.WriteLine("CosClientException: " + clientEx.Message);
               }
               catch (COSXML.CosException.CosServerException serverEx)
               {
               	//请求失败
               	Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               }
            </summary>
            <param name="request">CopyObjectRequest</param>
            <returns>CopyObjectResult</returns>
            <exception cref="T:COSXML.CosException.CosServerException">CosServerException</exception>
            <exception cref="T:COSXML.CosException.CosClientException">CosClientException</exception>
        </member>
        <member name="M:COSXML.CosXml.CopyObject(COSXML.Model.Object.CopyObjectRequest,COSXML.Callback.OnSuccessCallback{COSXML.Model.CosResult},COSXML.Callback.OnFailedCallback)">
            <summary>
            copy object
               //异步方法
               string sourceAppid = "1253960454"; //账号 appid
               string sourceBucket = "source-1253960454"; //"源对象所在的存储桶
               string sourceRegion = "ap-beijing"; //源对象的存储桶所在的地域
               string sourceKey = "test.txt"; //源对象键
               //构造源对象属性
               COSXML.Model.Tag.CopySourceStruct copySource = new CopySourceStruct(sourceAppid, sourceBucket, sourceRegion, sourceKey);
               
               string bucket = "test-1253960454"; //存储桶，格式：bucketname-appid
               string key = "copy_test.txt"; //对象在存储桶中的位置，即称对象键.
               CopyObjectRequest request =  new CopyObjectRequest(bucket, key);
               //设置签名有效时长
               request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               //设置拷贝源
               request.SetCopySource(copySource);
               //设置是否拷贝还是更新,此处是拷贝
               request.SetCopyMetaDataDirective(COSXML.Common.CosMetaDataDirective.COPY);
               //执行请求
               cosXml.CopyObject(request,
               	delegate(COSXML.Model.CosResult cosResult)
               	{
               		//请求成功
               		CopyObjectResult result = cosResult as CopyObjectResult;
               		Console.WriteLine(result.GetResultInfo());
               
               	}, 
               	delegate(COSXML.CosException.CosClientException clientEx, COSXML.CosException.CosServerException serverEx)
               	{	
               		//请求失败
               		if (clientEx != null)
               		{
               			Console.WriteLine("CosClientException: " + clientEx.Message);
               		}
               		else if (serverEx != null)
               		{
               			Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               		}
               	});
            </summary>
            <param name="request"></param>
            <param name="successCallback"></param>
            <param name="failCallback"></param>
        </member>
        <member name="M:COSXML.CosXml.PartCopy(COSXML.Model.Object.UploadPartCopyRequest)">
            <summary>
            copy part object for cos
               try
               {
               	string sourceAppid = "1253960454"; //账号 appid
               	string sourceBucket = "source-1253960454"; //"源对象所在的存储桶
               	string sourceRegion = "ap-beijing"; //源对象的存储桶所在的地域
               	string sourceKey = "test.txt"; //源对象键
               	//构造源对象属性
               	COSXML.Model.Tag.CopySourceStruct copySource = new CopySourceStruct(sourceAppid, sourceBucket, sourceRegion, sourceKey);
               
               	string bucket = "test-1253960454"; //存储桶，格式：bucketname-appid
               	string key = "copy_test.txt"; //对象在存储桶中的位置，即称对象键.
               	string uploadId = "1505706248ca8373f8a5cd52cb129f4bcf85e11dc8833df34f4f5bcc456c99c42cd1ffa2f9 "； //初始化分片上传的 uploadId
               	int partNumber = 1; // partNumber >= 1
               	UploadPartCopyRequest request = new UploadPartCopyRequest(bucket, key, partNumber, uploadId);
               	//设置签名有效时长
               	request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               	//设置拷贝源
               	request.SetCopySource(copySource);
               	//设置复制分片块
               	request.SetCopyRange(0, 1024 * 1024);
               	//执行请求
               	UploadPartCopyResult result = cosXml.PartCopy(request);
               	//请求成功
               	//获取该分片块返回的eTag,用于CompleteMultiUpload
               	string eTag = result.copyObject.eTag;
               	Console.WriteLine(result.GetResultInfo());
               }
               catch (COSXML.CosException.CosClientException clientEx)
               {	
               	//请求失败
               	Console.WriteLine("CosClientException: " + clientEx.Message);
               }
               catch (COSXML.CosException.CosServerException serverEx)
               {
               	//请求失败
               	Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               }
            </summary>
            <param name="request">UploadPartCopyRequest</param>
            <returns>UploadPartCopyResult</returns>
            <exception cref="T:COSXML.CosException.CosServerException">CosServerException</exception>
            <exception cref="T:COSXML.CosException.CosClientException">CosClientException</exception>
        </member>
        <member name="M:COSXML.CosXml.PartCopy(COSXML.Model.Object.UploadPartCopyRequest,COSXML.Callback.OnSuccessCallback{COSXML.Model.CosResult},COSXML.Callback.OnFailedCallback)">
            <summary>
            copy part object
               //异步方法
               string sourceAppid = "1253960454"; //账号 appid
               string sourceBucket = "source-1253960454"; //"源对象所在的存储桶
               string sourceRegion = "ap-beijing"; //源对象的存储桶所在的地域
               string sourceKey = "test.txt"; //源对象键
               //构造源对象属性
               COSXML.Model.Tag.CopySourceStruct copySource = new CopySourceStruct(sourceAppid, sourceBucket, sourceRegion, sourceKey);
               
               string bucket = "test-1253960454"; //存储桶，格式：bucketname-appid
               string key = "copy_test.txt"; //对象在存储桶中的位置，即称对象键.
               string uploadId = "1505706248ca8373f8a5cd52cb129f4bcf85e11dc8833df34f4f5bcc456c99c42cd1ffa2f9 "； //初始化分片上传的 uploadId
               int partNumber = 1; // partNumber >= 1
               UploadPartCopyRequest request = new UploadPartCopyRequest(bucket, key, partNumber, uploadId);
               //设置签名有效时长
               request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               //设置拷贝源
               request.SetCopySource(copySource);
               //设置是否拷贝还是更新,此处是拷贝
               request.SetCopyMetaDataDirective(COSXML.Common.CosMetaDataDirective.COPY);
               //执行请求
               cosXml.PartCopy(request,
               	delegate(COSXML.Model.CosResult cosResult)
               	{
               		//请求成功
               		UploadPartCopyResult getObjectResult = result as UploadPartCopyResult;
               		//获取该分片块返回的eTag,用于CompleteMultiUpload
               		string eTag = result.copyObject.eTag;
               		Console.WriteLine(result.GetResultInfo());
               
               	}, 
               	delegate(COSXML.CosException.CosClientException clientEx, COSXML.CosException.CosServerException serverEx)
               	{	
               		//请求失败
               		if (clientEx != null)
               		{
               			Console.WriteLine("CosClientException: " + clientEx.Message);
               		}
               		else if (serverEx != null)
               		{
               			Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               		}
               });
            </summary>
            <param name="request"></param>
            <param name="successCallback"></param>
            <param name="failCallback"></param>
        </member>
        <member name="M:COSXML.CosXml.OptionObject(COSXML.Model.Object.OptionObjectRequest)">
            <summary>
            option object for cos
               try
               {
                string origin = "http://cloud.tencent.com";
                string accessMthod = "PUT";
                OptionObjectRequest request = new OptionObjectRequest(bucket, key, origin, accessMthod);
                //设置签名有效时长
                request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               
                //执行请求
                OptionObjectResult result = cosXml.OptionObject(request);
               
                Console.WriteLine(result.GetResultInfo());
               }
               catch (COSXML.CosException.CosClientException clientEx)
               {
                Console.WriteLine("CosClientException: " + clientEx.Message);
               }
               catch (COSXML.CosException.CosServerException serverEx)
               {
                Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               }
            </summary>
            <param name="request"></param>
            <returns></returns>
            <exception cref="T:COSXML.CosException.CosServerException">CosServerException</exception>
            <exception cref="T:COSXML.CosException.CosClientException">CosClientException</exception>
        </member>
        <member name="M:COSXML.CosXml.OptionObject(COSXML.Model.Object.OptionObjectRequest,COSXML.Callback.OnSuccessCallback{COSXML.Model.CosResult},COSXML.Callback.OnFailedCallback)">
            <summary>
            option object
               异步方法
               string origin = "http://cloud.tencent.com";
               string accessMthod = "PUT";
               OptionObjectRequest request = new OptionObjectRequest(bucket, key, origin, accessMthod);
               //设置签名有效时长
               request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               
               cosXml.OptionObject(request,
               delegate (CosResult cosResult)
               {
                OptionObjectResult result = cosResult as OptionObjectResult;
                Console.WriteLine(result.GetResultInfo());
               },
               delegate (CosClientException clientEx, CosServerException serverEx)
               {
                if (clientEx != null)
                {
                   Console.WriteLine("CosClientException: " + clientEx.Message);
                }
                if (serverEx != null)
                {
                   Console.WriteLine("CosServerException: " + serverEx.GetInfo());
                }
               });
            </summary>
            <param name="request"></param>
            <param name="successCallback"></param>
            <param name="failCallback"></param>
        </member>
        <member name="M:COSXML.CosXml.PostObject(COSXML.Model.Object.PostObjectRequest)">
            <summary>
            post object to cos
               try
               {
               	string bucket = "test-1253960454"; //存储桶，格式：bucketname-appid
               	string key = "test.txt"; //对象在存储桶中的位置，即称对象键.
               	string srcPath = @"F:\test.txt"；//本地文件路径
               	PostObjectRequest request = new PostObjectRequest(bucket, key, srcPath);
               	//设置签名有效时长
               	request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               	//设置进度回调
               	request.SetCosProgressCallback(delegate(long completed, long total)
               	{
               		Console.WriteLine(String.Format("progress = {1:##.##}%", completed * 100.0 / total));
               	});
               	//执行请求
               	PostObjectResult result = cosXml.PostObject(request);
               	//请求成功
               	Console.WriteLine(result.GetResultInfo());
               }
               catch (COSXML.CosException.CosClientException clientEx)
               {	
               	//请求失败
               	Console.WriteLine("CosClientException: " + clientEx.Message);
               }
               catch (COSXML.CosException.CosServerException serverEx)
               {
               	//请求失败
               	Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               }
            </summary>
            <param name="request">PostObjectRequest</param>
            <returns>PostObjectResult</returns>
            <exception cref="T:COSXML.CosException.CosServerException">CosServerException</exception>
            <exception cref="T:COSXML.CosException.CosClientException">CosClientException</exception>
        </member>
        <member name="M:COSXML.CosXml.PostObject(COSXML.Model.Object.PostObjectRequest,COSXML.Callback.OnSuccessCallback{COSXML.Model.CosResult},COSXML.Callback.OnFailedCallback)">
            <summary>
            post obejct
               //异步方法
               string bucket = "test-1253960454"; //存储桶，格式：bucketname-appid
               string key = "test.txt"; //对象在存储桶中的位置，即称对象键.
               string srcPath = @"F:\test.txt";  //本地文件路径
               PostObjectRequest request = new PostObjectRequest(bucket, key, srcPath);
               //设置签名有效时长
               request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               //设置进度回调
               request.SetCosProgressCallback(delegate(long completed, long total)
               {
               	Console.WriteLine(String.Format("progress = {1:##.##}%", completed * 100.0 / total));
               });
               //执行请求
               cosXml.PostObject(request,
               	delegate(COSXML.Model.CosResult cosResult)
               	{
               		//请求成功
               		PostObjectResult result = cosResult as PostObjectResult;
               		Console.WriteLine(result.GetResultInfo());
               
               	}, 
               	delegate(COSXML.CosException.CosClientException clientEx, COSXML.CosException.CosServerException serverEx)
               	{	
               		//请求失败
               		if (clientEx != null)
               		{
               			Console.WriteLine("CosClientException: " + clientEx.Message);
               		}
               		else if (serverEx != null)
               		{
               			Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               		}
               });
            </summary>
            <param name="request"></param>
            <param name="successCallback"></param>
            <param name="failCallback"></param>
        </member>
        <member name="M:COSXML.CosXml.RestoreObject(COSXML.Model.Object.RestoreObjectRequest)">
            <summary>
            restore object for cos
               try
               {
               	string bucket = "test-1253960454"; //存储桶，格式：bucketname-appid
               	string key = "test.txt"; //对象在存储桶中的位置，即称对象键.
               	RestoreObjectRequest request = new RestoreObjectRequest(bucket, key);
               	//设置签名有效时长
               	request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               	//恢复时间
               	request.SetExpireDays(3);
               	request.SetTier(COSXML.Model.Tag.RestoreConfigure.Tier.Bulk);
               
               	//执行请求
               	RestoreObjectResult result = cosXml.RestoreObject(request);
               	//请求成功
                   Console.WriteLine(result.GetResultInfo());
               }
               catch (COSXML.CosException.CosClientException clientEx)
               {	
               	//请求失败
               	Console.WriteLine("CosClientException: " + clientEx.Message);
               }
               catch (COSXML.CosException.CosServerException serverEx)
               {
               	//请求失败
               	Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               }
            </summary>
            <param name="request">RestoreObjectRequest</param>
            <returns>RestoreObjectResult</returns>
            <exception cref="T:COSXML.CosException.CosServerException">CosServerException</exception>
            <exception cref="T:COSXML.CosException.CosClientException">CosClientException</exception>
        </member>
        <member name="M:COSXML.CosXml.RestoreObject(COSXML.Model.Object.RestoreObjectRequest,COSXML.Callback.OnSuccessCallback{COSXML.Model.CosResult},COSXML.Callback.OnFailedCallback)">
            <summary>
            restore object for cos
               //异步方法
               string bucket = "test-1253960454"; //存储桶，格式：bucketname-appid
               string key = "test.txt"; //对象在存储桶中的位置，即称对象键.
               RestoreObjectRequest request = new RestoreObjectRequest(bucket, key);
               //设置签名有效时长
               request.SetSign(TimeUtils.GetCurrentTime(TimeUnit.SECONDS), 600);
               //恢复时间
               request.SetExpireDays(3);
               request.SetTier(COSXML.Model.Tag.RestoreConfigure.Tier.Bulk);
               //执行请求
               cosXml.RestoreObject(request,
               	delegate(COSXML.Model.CosResult cosResult)
               	{
               		//请求成功
               		RestoreObjectResult result = cosResult as RestoreObjectResult;
               		Console.WriteLine(result.GetResultInfo());
               
               	}, 
               	delegate(COSXML.CosException.CosClientException clientEx, COSXML.CosException.CosServerException serverEx)
               	{	
               		//请求失败
               		if (clientEx != null)
               		{
               			Console.WriteLine("CosClientException: " + clientEx.Message);
               		}
               		else if (serverEx != null)
               		{
               			Console.WriteLine("CosServerException: " + serverEx.GetInfo());
               		}
               });
            </summary>
            <param name="request"></param>
            <param name="successCallback"></param>
            <param name="failCallback"></param>
        </member>
        <member name="M:COSXML.CosXmlConfig.Builder.SetAppid(System.String)">
            <summary>
            cos 服务的Appid
            </summary>
            <param name="appid"></param>
            <returns></returns>
        </member>
        <member name="M:COSXML.CosXmlConfig.Builder.SetRegion(System.String)">
            <summary>
            存储桶所属地域
            <see cref="T:COSXML.Common.CosRegion"/>
            </summary>
            <param name="region"></param>
            <returns></returns>
        </member>
        <member name="M:COSXML.CosXmlConfig.Builder.IsHttps(System.Boolean)">
            <summary>
            true：https请求
            </summary>
            <param name="isHttps"></param>
            <returns></returns>
        </member>
        <member name="T:COSXML.Callback.OnProgressCallback">
            <summary>
            progress
            </summary>
            <param name="completed"></param>
            <param name="total"></param>
        </member>
        <member name="T:COSXML.Callback.OnNotifyGetResponse">
            <summary>
            notify has been got response
            </summary>
        </member>
        <member name="T:COSXML.Callback.OnSuccessCallback`1">
            <summary>
            success
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="cosRequest"></param>
            <param name="cosResult"></param>
        </member>
        <member name="T:COSXML.Callback.OnFailedCallback">
            <summary>
            failed
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cosRequest"></param>
            <param name="clientException"></param>
            <param name="serverException"></param>
        </member>
        <member name="T:COSXML.Callback.OnParseStream">
            <summary>
            parse stream
            </summary>
            <param name="inputStream"></param>
            <param name="contentType"></param>
            <param name="contentLength"></param>
            <exception cref="T:COSXML.CosException.CosServerException">throw CosServerException</exception>
            <exception cref="T:COSXML.CosException.CosClientException">throw CosClientException</exception>
            <exception cref="T:System.Exception"> throw Excetpion</exception>
        </member>
        <member name="F:COSXML.Log.QLog.timeFormat">
            log format: [time] [thread]/[application] [Level]/[TAG]: [message]
        </member>
        <member name="T:COSXML.Model.Bucket.BucketRequest">
            Buceket request for cos
            base class
            provider bucket,region property
        </member>
        <member name="F:COSXML.Model.Bucket.BucketRequest.bucket">
            <summary>
            cos 存储桶,即 Bucket
            </summary>
        </member>
        <member name="F:COSXML.Model.Bucket.BucketRequest.region">
            <summary>
            Bucket 所在的地域
            </summary>
        </member>
        <member name="P:COSXML.Model.Bucket.BucketRequest.Bucket">
            <summary>
            Bucket 名称， "BucketName-APPID"
            </summary>
        </member>
        <member name="P:COSXML.Model.Bucket.BucketRequest.Region">
            <summary>
            Bucket 所在地域
            <see cref="T:COSXML.Common.CosRegion"/>
            </summary>
        </member>
        <member name="T:COSXML.Model.Bucket.DeleteBucketCORSRequest">
            <summary>
            删除 Bucket CORS
            <see cref="!:https://cloud.tencent.com/document/product/436/8283"/>
            </summary>
        </member>
        <member name="T:COSXML.Model.Bucket.DeleteBucketCORSResult">
            <summary>
            删除 Bucket CORS 返回的结果
            <see cref="!:https://cloud.tencent.com/document/product/436/8283"/>
            </summary>
        </member>
        <member name="T:COSXML.Model.Bucket.DeleteBucketLifecycleRequest">
            <summary>
            删除 Bucket Lifecycle
            <see cref="!:https://cloud.tencent.com/document/product/436/8284"/>
            </summary>
        </member>
        <member name="T:COSXML.Model.Bucket.DeleteBucketLifecycleResult">
            <summary>
            删除 Bucket Lifecycle 返回的结果
            <see cref="!:https://cloud.tencent.com/document/product/436/8284"/>
            </summary>
        </member>
        <member name="T:COSXML.Model.Bucket.DeleteBucketPolicyRequest">
            <summary>
            删除 Bucket 权限策略
            <see cref="!:https://cloud.tencent.com/document/product/436/8285"/>
            </summary>
        </member>
        <member name="T:COSXML.Model.Bucket.DeleteBucketPolicyResult">
            <summary>
            删除 Bucket 权限策略返回的结果
            <see cref="!:https://cloud.tencent.com/document/product/436/8285"/>
            </summary>
        </member>
        <member name="M:COSXML.Model.Bucket.DeleteBucketRequest.#ctor(System.String)">
            <summary>
            删除 空 Bucket
            </summary>
            <param name="bucket"></param>
        </member>
        <member name="T:COSXML.Model.Bucket.DeleteBucketResult">
            <summary>
            删除 空 Bucket返回的结果
            </summary>
        </member>
        <member name="T:COSXML.Model.Bucket.GetBucketACLRequest">
            <summary>
            获取 Bucket 的访问权限控制列表
            <see cref="!:https://cloud.tencent.com/document/product/436/7733"/>
            </summary>
        </member>
        <member name="T:COSXML.Model.Bucket.GetBucketACLResult">
            <summary>
            获取 Bucket 访问权限列表返回的结果
            <see cref="!:https://cloud.tencent.com/document/product/436/7733"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Bucket.GetBucketACLResult.accessControlPolicy">
            <summary>
            访问权限列表信息
            <see cref="T:COSXML.Model.Tag.AccessControlPolicy"/>
            </summary>
        </member>
        <member name="T:COSXML.Model.Bucket.GetBucketCORSRequest">
            <summary>
            获取 Bucket CORS 配置信息
            <see cref="!:https://cloud.tencent.com/document/product/436/8274"/>
            </summary>
        </member>
        <member name="T:COSXML.Model.Bucket.GetBucketCORSResult">
            <summary>
            获取 Bucket CORS 返回的结果
            <see cref="!:https://cloud.tencent.com/document/product/436/8274"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Bucket.GetBucketCORSResult.corsConfiguration">
            <summary>
            跨域资源共享配置的所有信息，最多可以包含100条 CORSRule
            <see cref="T:COSXML.Model.Tag.CORSConfiguration"/>
            </summary>
        </member>
        <member name="T:COSXML.Model.Bucket.GetBucketLifecycleRequest">
            <summary>
            查询 Bucket 的生命周期配置
            <see cref="!:https://cloud.tencent.com/document/product/436/8278"/>
            </summary>
        </member>
        <member name="T:COSXML.Model.Bucket.GetBucketLifecycleResult">
            <summary>
            查询 Bucket 的生命周期配置 返回的结果
            <see cref="!:https://cloud.tencent.com/document/product/436/8278"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Bucket.GetBucketLifecycleResult.lifecycleConfiguration">
            <summary>
            生命周期配置信息
            <see cref="T:COSXML.Model.Tag.LifecycleConfiguration"/>
            </summary>
        </member>
        <member name="T:COSXML.Model.Bucket.GetBucketLocationRequest">
            <summary>
            获取 Bucket 地域信息
            <see cref="!:https://cloud.tencent.com/document/product/436/8275"/>
            </summary>
        </member>
        <member name="T:COSXML.Model.Bucket.GetBucketLocationResult">
            <summary>
            查询 Bucket 地域信息返回的结果
            <see cref="!:https://cloud.tencent.com/document/product/436/8275"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Bucket.GetBucketLocationResult.locationConstraint">
            <summary>
            地域信息
            <see cref="T:COSXML.Model.Tag.LocationConstraint"/>
            </summary>
        </member>
        <member name="T:COSXML.Model.Bucket.GetBucketPolicyRequest">
            <summary>
            获取 Bucket 权限策略
            <see cref="!:https://cloud.tencent.com/document/product/436/8276"/>
            </summary>
        </member>
        <member name="T:COSXML.Model.Bucket.GetBucketPolicyResult">
            <summary>
            获取 Bucket 权限策略
            <see cref="!:https://cloud.tencent.com/document/product/436/8276"/>
            </summary>
        </member>
        <member name="T:COSXML.Model.Bucket.GetBucketRequest">
            <summary>
            获取 Bucket 中对象列表
            <see cref="!:https://cloud.tencent.com/document/product/436/7734"/>
            </summary>
        </member>
        <member name="M:COSXML.Model.Bucket.GetBucketRequest.SetPrefix(System.String)">
            <summary>
            前缀匹配，用来规定返回的文件前缀地址
            </summary>
            <param name="prefix"></param>
        </member>
        <member name="M:COSXML.Model.Bucket.GetBucketRequest.SetDelimiter(System.String)">
            <summary>
            定界符为一个符号，
            如果有 Prefix，则将 Prefix 到 delimiter 之间的相同路径归为一类，定义为 Common Prefix，然后列出所有 Common Prefix。
            如果没有 Prefix，则从路径起点开始
            </summary>
            <param name="delimiter"></param>
        </member>
        <member name="M:COSXML.Model.Bucket.GetBucketRequest.SetEncodingType(System.String)">
            <summary>
            规定返回值的编码方式，可选值：url
            </summary>
            <param name="encodingType"></param>
        </member>
        <member name="M:COSXML.Model.Bucket.GetBucketRequest.SetMarker(System.String)">
            <summary>
            默认以 UTF-8 二进制顺序列出条目，所有列出条目从 marker 开始
            </summary>
            <param name="marker"></param>
        </member>
        <member name="M:COSXML.Model.Bucket.GetBucketRequest.SetMaxKeys(System.String)">
            <summary>
            单次返回最大的条目数量，默认 1000
            </summary>
            <param name="maxKeys"></param>
        </member>
        <member name="T:COSXML.Model.Bucket.GetBucketResult">
            <summary>
            获取 Bucket 对象列表返回的jieguo
            <see cref="!:https://cloud.tencent.com/document/product/436/7734"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Bucket.GetBucketResult.listBucket">
            <summary>
            保存 Get Bucket 请求结果的所有信息
            <see cref="T:COSXML.Model.Tag.ListBucket"/>
            </summary>
        </member>
        <member name="T:COSXML.Model.Bucket.HeadBucketRequest">
            <summary>
            检索 Bucket 是否存在
            <see cref="!:https://cloud.tencent.com/document/product/436/7735"/>
            </summary>
        </member>
        <member name="T:COSXML.Model.Bucket.HeadBucketResult">
            <summary>
            检索 Bucket 是否存在的返回结果
            <see cref="!:https://cloud.tencent.com/document/product/436/7735"/>
            </summary>
        </member>
        <member name="T:COSXML.Model.Bucket.ListMultiUploadsRequest">
            <summary>
            查询 Bucket 正在进行中的分块上传
            <see cref="!:https://cloud.tencent.com/document/product/436/7736"/>
            </summary>
        </member>
        <member name="M:COSXML.Model.Bucket.ListMultiUploadsRequest.SetDelimiter(System.String)">
            <summary>
            定界符为一个符号，
            对 Object 名字包含指定前缀且第一次出现 delimiter 字符之间的 Object 作为一组元素：common prefix。
            如果没有 prefix，则从路径起点开始
            </summary>
            <param name="delimiter"></param>
        </member>
        <member name="M:COSXML.Model.Bucket.ListMultiUploadsRequest.SetEncodingType(System.String)">
            <summary>
            规定返回值的编码格式，合法值：url
            </summary>
            <param name="encodingType"></param>
        </member>
        <member name="M:COSXML.Model.Bucket.ListMultiUploadsRequest.SetKeyMarker(System.String)">
            <summary>
            与 upload-id-marker 一起使用.
            当 upload-id-marker 未被指定时，ObjectName 字母顺序大于 key-marker 的条目将被列出.
            当upload-id-marker被指定时，ObjectName 字母顺序大于key-marker的条目被列出，
            ObjectName 字母顺序等于 key-marker 同时 UploadID 大于 upload-id-marker 的条目将被列出。
            </summary>
            <param name="keyMarker"></param>
        </member>
        <member name="M:COSXML.Model.Bucket.ListMultiUploadsRequest.SetMaxUploads(System.String)">
            <summary>
            设置最大返回的 multipart 数量，合法取值从1到1000，默认1000
            </summary>
            <param name="maxUploads"></param>
        </member>
        <member name="M:COSXML.Model.Bucket.ListMultiUploadsRequest.SetPrefix(System.String)">
            <summary>
            限定返回的 Object key 必须以 Prefix 作为前缀。
            注意使用 prefix 查询时，返回的 key 中仍会包含 Prefix
            </summary>
            <param name="prefix"></param>
        </member>
        <member name="M:COSXML.Model.Bucket.ListMultiUploadsRequest.SetUploadIdMarker(System.String)">
            <summary>
            与 key-marker 一起使用.
            当 key-marker 未被指定时，upload-id-marker 将被忽略.
            当 key-marker 被指定时，ObjectName字母顺序大于 key-marker 的条目被列出，
            ObjectName 字母顺序等于 key-marker 同时 UploadID 大于 upload-id-marker 的条目将被列出.
            </summary>
            <param name="uploadIdMarker"></param>
        </member>
        <member name="T:COSXML.Model.Bucket.ListMultiUploadsResult">
            <summary>
            查询 Bucket 正在进行中的分块上传返回的结果
            <see cref="!:https://cloud.tencent.com/document/product/436/7736"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Bucket.ListMultiUploadsResult.listMultipartUploads">
            <summary>
            所有分块上传的信息
            <see cref="T:COSXML.Model.Tag.ListMultipartUploads"/>
            </summary>
        </member>
        <member name="T:COSXML.Model.Bucket.PutBucketACLRequest">
            <summary>
            设置 Bucket 的ACL
            <see cref="!:https://cloud.tencent.com/document/product/436/7737"/>
            </summary>
        </member>
        <member name="M:COSXML.Model.Bucket.PutBucketACLRequest.SetCosACL(System.String)">
            <summary>
            定义 Object 的 acl 属性。有效值：private，public-read-write，public-read；默认值：private
            <see cref="T:COSXML.Common.CosACL"/>
            </summary>
            <param name="cosACL"></param>
        </member>
        <member name="M:COSXML.Model.Bucket.PutBucketACLRequest.SetCosACL(COSXML.Common.CosACL)">
            <summary>
            定义 Object 的 acl 属性。有效值：private，public-read-write，public-read；默认值：private
            <see cref="T:COSXML.Common.CosACL"/> 
            </summary>
            <param name="cosACL"></param>
        </member>
        <member name="M:COSXML.Model.Bucket.PutBucketACLRequest.SetXCosGrantRead(COSXML.Model.Tag.GrantAccount)">
            <summary>
            赋予被授权者读的权限
            <see cref="T:COSXML.Model.Tag.GrantAccount"/>
            </summary>
            <param name="grantAccount"></param>
        </member>
        <member name="M:COSXML.Model.Bucket.PutBucketACLRequest.SetXCosGrantWrite(COSXML.Model.Tag.GrantAccount)">
            <summary>
            赋予被授权者写的权限
            <see cref="T:COSXML.Model.Tag.GrantAccount"/>
            </summary>
            <param name="grantAccount"></param>
        </member>
        <member name="M:COSXML.Model.Bucket.PutBucketACLRequest.SetXCosReadWrite(COSXML.Model.Tag.GrantAccount)">
            <summary>
            赋予被授权者所有的权限
            <see cref="T:COSXML.Model.Tag.GrantAccount"/>
            </summary>
            <param name="grantAccount"></param>
        </member>
        <member name="T:COSXML.Model.Bucket.PutBucketACLResult">
            <summary>
            设置 Bucket ACL返回的结果
            <see cref="!:https://cloud.tencent.com/document/product/436/7737"/>
            </summary>
        </member>
        <member name="T:COSXML.Model.Bucket.PutBucketCORSRequest">
            <summary>
            设置 Bucket CORS
            <see cref="!:https://cloud.tencent.com/document/product/436/8279"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Bucket.PutBucketCORSRequest.corsConfiguration">
            <summary>
            CORS 配置信息
            <see cref="T:COSXML.Model.Tag.CORSConfiguration"/>
            </summary>
        </member>
        <member name="M:COSXML.Model.Bucket.PutBucketCORSRequest.SetCORSRule(COSXML.Model.Tag.CORSConfiguration.CORSRule)">
            <summary>
            设置 CORS 规则
            <see cref="T:COSXML.Model.Tag.CORSConfiguration.CORSRule"/>
            </summary>
            <param name="corsRule"></param>
        </member>
        <member name="M:COSXML.Model.Bucket.PutBucketCORSRequest.SetCORSRules(System.Collections.Generic.List{COSXML.Model.Tag.CORSConfiguration.CORSRule})">
            <summary>
            设置 CORS 规则
            <see cref="T:COSXML.Model.Tag.CORSConfiguration.CORSRule"/>
            </summary>
            <param name="corsRules"></param>
        </member>
        <!-- 对于成员“T:COSXML.Model.Bucket.PutBucketCORSResult”忽略有格式错误的 XML 注释 -->
        <member name="T:COSXML.Model.Bucket.PutBucketLifecycleRequest">
            <summary>
            设置 Bucket 生命周期
            <see cref="!:https://cloud.tencent.com/document/product/436/8280"/>
            </summary>
        </member>
        <member name="M:COSXML.Model.Bucket.PutBucketLifecycleRequest.SetRule(COSXML.Model.Tag.LifecycleConfiguration.Rule)">
            <summary>
            设置生命周期规则
            <see cref="T:COSXML.Model.Tag.LifecycleConfiguration.Rule"/>
            </summary>
            <param name="rule"></param>
        </member>
        <member name="M:COSXML.Model.Bucket.PutBucketLifecycleRequest.SetRules(System.Collections.Generic.List{COSXML.Model.Tag.LifecycleConfiguration.Rule})">
            <summary>
            设置生命周期规则
            <see cref="T:COSXML.Model.Tag.LifecycleConfiguration.Rule"/>
            </summary>
            <param name="rules"></param>
        </member>
        <member name="T:COSXML.Model.Bucket.PutBucketLifecycleResult">
            <summary>
            设置 Bucket 生命周期的返回结果
            <see cref="!:https://cloud.tencent.com/document/product/436/8280"/>
            </summary>
        </member>
        <member name="T:COSXML.Model.Bucket.PutBucketReplicationRequest">
            <summary>
            
            </summary>
        </member>
        <member name="T:COSXML.Model.Bucket.PutBucketRequest">
            <summary>
            创建 Bucket
            <see cref="!:https://cloud.tencent.com/document/product/436/7738"/>
            </summary>
        </member>
        <member name="M:COSXML.Model.Bucket.PutBucketRequest.SetCosACL(System.String)">
            <summary>
            定义 Object 的 acl 属性。有效值：private，public-read-write，public-read；默认值：private
            <see cref="T:COSXML.Common.CosACL"/>
            </summary>
            <param name="cosACL"></param>
        </member>
        <member name="M:COSXML.Model.Bucket.PutBucketRequest.SetCosACL(COSXML.Common.CosACL)">
            <summary>
            定义 Object 的 acl 属性。有效值：private，public-read-write，public-read；默认值：private
            <see cref="T:COSXML.Common.CosACL"/>
            </summary>
            <param name="cosACL"></param>
        </member>
        <member name="M:COSXML.Model.Bucket.PutBucketRequest.SetXCosGrantRead(COSXML.Model.Tag.GrantAccount)">
            <summary>
            赋予被授权者读的权限
            <see cref="T:COSXML.Model.Tag.GrantAccount"/>
            </summary>
            <param name="grantAccount"></param>
        </member>
        <member name="M:COSXML.Model.Bucket.PutBucketRequest.SetXCosGrantWrite(COSXML.Model.Tag.GrantAccount)">
            <summary>
            赋予被授权者写的权限
            <see cref="T:COSXML.Model.Tag.GrantAccount"/>
            </summary>
            <param name="grantAccount"></param>
        </member>
        <member name="M:COSXML.Model.Bucket.PutBucketRequest.SetXCosReadWrite(COSXML.Model.Tag.GrantAccount)">
            <summary>
            赋予被授权者所有的权限
            <see cref="T:COSXML.Model.Tag.GrantAccount"/>
            </summary>
            <param name="grantAccount"></param>
        </member>
        <member name="T:COSXML.Model.Bucket.PutBucketResult">
            <summary>
            创建 Bucket 返回的结果
            <see cref="!:https://cloud.tencent.com/document/product/436/7738"/>
            </summary>
        </member>
        <member name="T:COSXML.Model.CosRequest">
            cos request base class, all cos operator must be extended this.
            
            request method | request path | query parameters
            request headers
            request body
            
            special:
            cos sign;
        </member>
        <member name="F:COSXML.Model.CosRequest.isHttps">
            <summary>
            isHttps = true, https 请求; isHttps = false, http 请求； default isHttps = false.
            </summary>
        </member>
        <member name="F:COSXML.Model.CosRequest.method">
            <summary>
            cos api 请求对应的 http method.
            </summary>
        </member>
        <member name="F:COSXML.Model.CosRequest.path">
            <summary>
            http 请求url中 path 部分.
            </summary>
        </member>
        <member name="F:COSXML.Model.CosRequest.queryParameters">
            <summary>
            http 请求url中 query 部分.
            </summary>
        </member>
        <member name="F:COSXML.Model.CosRequest.headers">
            <summary>
            http 请求 header 部分.
            </summary>
        </member>
        <member name="F:COSXML.Model.CosRequest.appid">
            <summary>
            cos 服务的 appid.
            </summary>
        </member>
        <member name="F:COSXML.Model.CosRequest.cosXmlSignSourceProvider">
            <summary>
            cos 服务签名的签名源部分.
            </summary>
        </member>
        <member name="F:COSXML.Model.CosRequest.needMD5">
            <summary>
            needMD5 = true, 请求中带上 Content-Md5; needMd5 = false, 请求中不带 Content-Md5; defalut needMd5 = false.
            </summary>
        </member>
        <member name="F:COSXML.Model.CosRequest.requestUrlWithSign">
            <summary>
            请求预签名URL
            </summary>
        </member>
        <member name="P:COSXML.Model.CosRequest.IsHttps">
            <summary>
            http or https for cos request.
            </summary>
        </member>
        <member name="P:COSXML.Model.CosRequest.Method">
            <summary>
            http method
            </summary>
        </member>
        <member name="P:COSXML.Model.CosRequest.RequestPath">
            <summary>
            path of http url.
            </summary>
        </member>
        <member name="M:COSXML.Model.CosRequest.GetRequestParamters">
            <summary>
            query of http url.
            </summary>
            <returns></returns>
        </member>
        <member name="M:COSXML.Model.CosRequest.GetRequestHeaders">
            <summary>
            http request header
            </summary>
            <returns></returns>
        </member>
        <member name="M:COSXML.Model.CosRequest.SetQueryParameter(System.String,System.String)">
            <summary>
            add query parameter for cos request, and cover the current value if it exists with the key.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:COSXML.Model.CosRequest.SetQueryParameter(System.String,System.String,System.Boolean)">
            <summary>
            url 部分都统一 url encode
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="isNeedUrlEncode"></param>
        </member>
        <member name="M:COSXML.Model.CosRequest.SetRequestHeader(System.String,System.String)">
            <summary>
            add header for cos request, and cover the current value, if it exists with the key.
            </summary>
            <param name="key"> header: key </param>
            <param name="value"> header: value</param>
        </member>
        <member name="M:COSXML.Model.CosRequest.SetRequestHeader(System.String,System.String,System.Boolean)">
            <summary>
            header 默认不 encode
            </summary>
            <param name="key">不能为null 即不包含空格,即 位于(\u0020, \u007F)，超过这个范围，urlencode</param>
            <param name="value">可以为null，为空，且位于(\u001f，\u007F) 和 '\t',超过这个范围，urlencode</param>
            <param name="isNeedUrlEncode"></param>
        </member>
        <member name="P:COSXML.Model.CosRequest.APPID">
            <summary>
            set appid for cos.
            </summary>
            <param name="appid"> cos appid </param>
        </member>
        <member name="P:COSXML.Model.CosRequest.IsNeedMD5">
            <summary>
            是否带上content-md5
            </summary>
        </member>
        <member name="M:COSXML.Model.CosRequest.GetHost">
            <summary>
            return the host for cos request
            </summary>
            <returns>host(string)</returns>
        </member>
        <member name="M:COSXML.Model.CosRequest.GetRequestBody">
            <summary>
            return the body for cos request. such as upload file.
            </summary>
            <returns> <see cref="T:COSXML.Network.RequestBody"/></returns>
        </member>
        <member name="M:COSXML.Model.CosRequest.CheckParameters">
            <summary>    
              check parameter for cos.
            </summary>
            <exception cref="T:COSXML.CosException.CosClientException"></exception>
        </member>
        <member name="M:COSXML.Model.CosRequest.SetSign(System.Int64,System.Int64)">
            <summary>
            设置签名的有效期： [signStartTimeSecond, signStartTimeSecond + durationSecond]
            </summary>
            <param name="signStartTimeSecond"></param>
            <param name="durationSecond"></param>
        </member>
        <member name="M:COSXML.Model.CosRequest.SetSign(System.Int64,System.Int64,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            计算签名时，带上头部header 和查询参数 query验证.
            设置签名的有效期： [signStartTimeSecond, signStartTimeSecond + durationSecond]
            </summary>
            <param name="signStartTimeSecond"></param>
            <param name="durationSecond"></param>
            <param name="headerKeys"></param>
            <param name="queryParameterKeys"></param>
        </member>
        <member name="M:COSXML.Model.CosRequest.SetSign(System.String)">
            <summary>
            直接设置签名串.
            </summary>
            <param name="sign"></param>
        </member>
        <member name="M:COSXML.Model.CosRequest.GetSignSourceProvider">
            <summary>
            返回签名数据源
            </summary>
            <returns></returns>
        </member>
        <member name="P:COSXML.Model.CosRequest.RequestURLWithSign">
            <summary>
            设置预签名URL
            </summary>
            <param name="requestSignURL"></param>
        </member>
        <member name="T:COSXML.Model.CosResult">
            this class for cos result.
            
        </member>
        <member name="F:COSXML.Model.CosResult.httpCode">
            <summary>
            http code
            </summary>
        </member>
        <member name="F:COSXML.Model.CosResult.httpMessage">
            <summary>
            http message
            </summary>
        </member>
        <member name="F:COSXML.Model.CosResult.responseHeaders">
            <summary>
            http response headers
            </summary>
        </member>
        <member name="M:COSXML.Model.CosResult.InternalParseResponseHeaders">
            <summary>
            parse status line and headers
            </summary>
            <param name="response"> <see cref="T:COSXML.Network.Response"/></param>
        </member>
        <member name="M:COSXML.Model.CosResult.ParseResponseBody(System.IO.Stream,System.String,System.Int64)">
            <summary>
            parse response body, such as download files.
            </summary>
            <param name="inputStream"> input stream </param>
            <param name="contentType"> body mime type</param>
            <param name="contentLength">body length</param>
        </member>
        <member name="M:COSXML.Model.CosResult.GetResultInfo">
            <summary>
            get result message
            </summary>
            <returns></returns>
        </member>
        <member name="T:COSXML.Model.Object.AbortMultipartUploadRequest">
            <summary>
            舍弃一个分块上传并删除已上传的块
            <see cref="!:https://cloud.tencent.com/document/product/436/7740"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.AbortMultipartUploadRequest.uploadId">
            <summary>
            分片块的UploadId,使用 Initiate Multipart Upload 接口初始化分片上传时会得到一个 uploadId，该 ID 不但唯一标识这一分块数据，也标识了这分块数据在整个文件内的相对位置
            </summary>
        </member>
        <member name="M:COSXML.Model.Object.AbortMultipartUploadRequest.SetUploadId(System.String)">
            <summary>
            分片块上传的UploadId
            </summary>
            <param name="uploadId"></param>
        </member>
        <member name="M:COSXML.Model.Object.AbortMultipartUploadRequest.GetUploadId">
            <summary>
            分片块上传的UploadId
            </summary>
            <returns>uploadId</returns>
        </member>
        <member name="T:COSXML.Model.Object.AbortMultipartUploadResult">
            <summary>
            舍弃一个分块上传并删除已上传的块返回的结果
            <see cref="!:https://cloud.tencent.com/document/product/436/7740"/>
            </summary>
        </member>
        <member name="T:COSXML.Model.Object.CompleteMultipartUploadRequest">
            <summary>
            实现完成整个分块上传
            <see cref="!:https://cloud.tencent.com/document/product/436/7742"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.CompleteMultipartUploadRequest.completeMultipartUpload">
            <summary>
            本次分块上传的所有信息
            <see cref="T:COSXML.Model.Tag.CompleteMultipartUpload"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.CompleteMultipartUploadRequest.uploadId">
            <summary>
            标识本次分块上传的 ID,
            使用 Initiate Multipart Upload 接口初始化分片上传时会得到一个 uploadId，
            该 ID 不但唯一标识这一分块数据，也标识了这分块数据在整个文件内的相对位置
            </summary>
        </member>
        <member name="M:COSXML.Model.Object.CompleteMultipartUploadRequest.SetUploadId(System.String)">
            <summary>
            标识本次分块上传的 ID,
            使用 Initiate Multipart Upload 接口初始化分片上传时会得到一个 uploadId，
            该 ID 不但唯一标识这一分块数据，也标识了这分块数据在整个文件内的相对位置
            </summary>
            <param name="uploadId"></param>
        </member>
        <member name="M:COSXML.Model.Object.CompleteMultipartUploadRequest.SetPartNumberAndETag(System.Int32,System.String)">
            <summary>
            添加分片块（块编号，块ETag值）
            </summary>
            <param name="partNumber"></param>
            <param name="eTag"></param>
        </member>
        <member name="M:COSXML.Model.Object.CompleteMultipartUploadRequest.SetPartNumberAndETag(System.Collections.Generic.Dictionary{System.Int32,System.String})">
            <summary>
            添加分片块（块编号，块ETag值）
            </summary>
            <param name="partNumberAndETags"></param>
        </member>
        <member name="T:COSXML.Model.Object.CompleteMultipartUploadResult">
            <summary>
            完成整个分块上传返回的结果
            <see cref="!:https://cloud.tencent.com/document/product/436/7742"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.CompleteMultipartUploadResult.completeResult">
            <summary>
            Complete返回信息
            <see cref="T:COSXML.Model.Tag.CompleteResult"/>
            </summary>
        </member>
        <member name="T:COSXML.Model.Object.CopyObjectRequest">
            <summary>
            实现将一个文件从源路径复制到目标路径
            <see cref="!:https://cloud.tencent.com/document/product/436/10881"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.CopyObjectRequest.copySourceStruct">
            <summary>
            拷贝的对象源
            <see cref="T:COSXML.Model.Tag.CopySourceStruct"/>
            </summary>
        </member>
        <member name="M:COSXML.Model.Object.CopyObjectRequest.SetCopySource(COSXML.Model.Tag.CopySourceStruct)">
            <summary>
            设置复制的对象源
            <see cref="T:COSXML.Model.Tag.CopySourceStruct"/>
            </summary>
            <param name="copySource"></param>
        </member>
        <member name="M:COSXML.Model.Object.CopyObjectRequest.SetCopyMetaDataDirective(COSXML.Common.CosMetaDataDirective)">
            <summary>
            是否拷贝源文件的元数据，枚举值：Copy, Replaced，默认值 Copy。
            假如标记为 Copy，则拷贝源文件的元数据；
            假如标记为 Replaced，则按本次请求的 Header 信息修改元数据。
            当目标路径和源路径一致，即用户试图修改元数据时，则标记必须为 Replaced
            </summary>
            <param name="metaDataDirective"></param>
        </member>
        <member name="M:COSXML.Model.Object.CopyObjectRequest.SetCopyIfModifiedSince(System.String)">
            <summary>
            当 Object 在指定时间后被修改，则执行操作，否则返回 412。
            可与 x-cos-copy-source-If-None-Match 一起使用，与其他条件联合使用返回冲突
            </summary>
            <param name="sourceIfModifiedSince"></param>
        </member>
        <member name="M:COSXML.Model.Object.CopyObjectRequest.SetCopyIfUnmodifiedSince(System.String)">
            <summary>
            当 Object 在指定时间后未被修改，则执行操作，否则返回 412。
            可与 x-cos-copy-source-If-Match 一起使用，与其他条件联合使用返回冲突。
            </summary>
            <param name="sourceIfUnmodifiedSince"></param>
        </member>
        <member name="M:COSXML.Model.Object.CopyObjectRequest.SetCopyIfMatch(System.String)">
            <summary>
             Object 的 Etag 和给定一致时，则执行操作，否则返回 412。
             可与 x-cos-copy-source-If-Unmodified-Since 一起使用，与其他条件联合使用返回冲突。
            </summary>
            <param name="eTag"></param>
        </member>
        <member name="M:COSXML.Model.Object.CopyObjectRequest.SetCopyIfNoneMatch(System.String)">
            <summary>
            当 Object 的 Etag 和给定不一致时，则执行操作，否则返回 412。
            可与 x-cos-copy-source-If-Modified-Since 一起使用，与其他条件联合使用返回冲突
            </summary>
            <param name="eTag"></param>
        </member>
        <member name="M:COSXML.Model.Object.CopyObjectRequest.SetCosStorageClass(COSXML.Common.CosStorageClass)">
            <summary>
            设置 Object 的存储级别，枚举值：STANDARD，STANDARD_IA。默认值：STANDARD
            <see cref="T:COSXML.Common.CosStorageClass"/>
            </summary>
            <param name="cosStorageClass"></param>
        </member>
        <member name="M:COSXML.Model.Object.CopyObjectRequest.SetCosACL(System.String)">
            <summary>
            定义 Object 的 ACL 属性。有效值：private，public-read-write，public-read；默认值：private
            <see cref="T:COSXML.Common.CosACL"/>
            </summary>
            <param name="cosACL"></param>
        </member>
        <member name="M:COSXML.Model.Object.CopyObjectRequest.SetCosACL(COSXML.Common.CosACL)">
            <summary>
            定义 Object 的 ACL 属性。有效值：private，public-read-write，public-read；默认值：private
            <see cref="T:COSXML.Common.CosACL"/>
            </summary>
            <param name="cosACL"></param>
        </member>
        <member name="M:COSXML.Model.Object.CopyObjectRequest.SetXCosGrantRead(COSXML.Model.Tag.GrantAccount)">
            <summary>
            赋予被授权者读的权限
            <see cref="T:COSXML.Model.Tag.GrantAccount"/>
            </summary>
            <param name="grantAccount"></param>
        </member>
        <member name="M:COSXML.Model.Object.CopyObjectRequest.SetXCosGrantWrite(COSXML.Model.Tag.GrantAccount)">
            <summary>
            赋予被授权者写的权限
            <see cref="T:COSXML.Model.Tag.GrantAccount"/>
            </summary>
            <param name="grantAccount"></param>
        </member>
        <member name="M:COSXML.Model.Object.CopyObjectRequest.SetXCosReadWrite(COSXML.Model.Tag.GrantAccount)">
            <summary>
            赋予被授权者所有的权限
            <see cref="T:COSXML.Model.Tag.GrantAccount"/>
            </summary>
            <param name="grantAccount"></param>
        </member>
        <member name="T:COSXML.Model.Object.CopyObjectResult">
            <summary>
            复制对象返回的结果
            <see cref="!:https://cloud.tencent.com/document/product/436/10881"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.CopyObjectResult.copyObject">
            <summary>
            复制结果信息
            <see cref="T:COSXML.Model.Tag.CopyObject"/>
            </summary>
        </member>
        <member name="T:COSXML.Model.Object.DeleteMultiObjectRequest">
            <summary>
            实现在指定 Bucket 中批量删除 Object,单次请求最大支持批量删除 1000 个 Object
            <see cref="!:https://cloud.tencent.com/document/product/436/8289"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.DeleteMultiObjectRequest.delete">
            <summary>
            删除对象
            <see cref="T:COSXML.Model.Tag.Delete"/>
            </summary>
        </member>
        <member name="M:COSXML.Model.Object.DeleteMultiObjectRequest.SetDeleteQuiet(System.Boolean)">
            <summary>
            返回模式
            verbose 模式和 quiet 模式，默认为 verbose 模式。
            verbose 模式返回每个 key 的删除情况，quiet 模式只返回删除失败的 key 的情况；
            </summary>
            <param name="quiet"></param>
        </member>
        <member name="M:COSXML.Model.Object.DeleteMultiObjectRequest.SetDeleteKey(System.String)">
            <summary>
            删除对象
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:COSXML.Model.Object.DeleteMultiObjectRequest.SetDeleteKey(System.String,System.String)">
            <summary>
            删除指定版本的对象
            </summary>
            <param name="key"></param>
            <param name="versionId"></param>
        </member>
        <member name="M:COSXML.Model.Object.DeleteMultiObjectRequest.SetObjectKeys(System.Collections.Generic.List{System.String})">
            <summary>
            删除对象
            </summary>
            <param name="keys"></param>
        </member>
        <member name="M:COSXML.Model.Object.DeleteMultiObjectRequest.SetObjectKeys(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            删除指定版本的对象
            </summary>
            <param name="versionIdAndKey"></param>
        </member>
        <member name="T:COSXML.Model.Object.DeleteMultiObjectResult">
            <summary>
            批量删除 Object返回的结果
            <see cref="!:https://cloud.tencent.com/document/product/436/8289"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.DeleteMultiObjectResult.deleteResult">
            <summary>
            本次删除返回结果的方式和目标 Object
            <see cref="T:COSXML.Model.Tag.DeleteResult"/>
            </summary>
        </member>
        <member name="T:COSXML.Model.Object.DeleteObjectRequest">
            <summary>
            删除对象
            <see cref="!:https://cloud.tencent.com/document/product/436/7743"/>
            </summary>
        </member>
        <member name="M:COSXML.Model.Object.DeleteObjectRequest.SetVersionId(System.String)">
            <summary>
            删除指定版本的对象
            </summary>
            <param name="versionId"></param>
        </member>
        <member name="T:COSXML.Model.Object.DeleteObjectResult">
            <summary>
            删除对象返回的结果
            <see cref="!:https://cloud.tencent.com/document/product/436/7743"/>
            </summary>
        </member>
        <member name="T:COSXML.Model.Object.GetObjectACLRequest">
            <summary>
            获取某个存储桶下的某个对象的访问权限
            <see cref="!:https://cloud.tencent.com/document/product/436/7744"/>
            </summary>
        </member>
        <member name="T:COSXML.Model.Object.GetObjectACLResult">
            <summary>
            获取某个存储桶下的某个对象的访问权限的返回结果
            <see cref="!:https://cloud.tencent.com/document/product/436/7744"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.GetObjectACLResult.accessControlPolicy">
            <summary>
            访问权限信息
            <see cref="T:COSXML.Model.Tag.AccessControlPolicy"/>
            </summary>
        </member>
        <member name="T:COSXML.Model.Object.GetObjectRequest">
            <summary>
            下载对象
            <see cref="!:https://cloud.tencent.com/document/product/436/7753"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.GetObjectRequest.localDir">
            <summary>
            保存文件的本地文件夹路径
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.GetObjectRequest.localFileName">
            <summary>
            保存文件的本地的文件名
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.GetObjectRequest.localFileOffset">
            <summary>
            保存文件的本地偏移位置，下载的数据从此处开始append该文件后面
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.GetObjectRequest.progressCallback">
            <summary>
            下载进度回调
            </summary>
        </member>
        <member name="M:COSXML.Model.Object.GetObjectRequest.SetCosProgressCallback(COSXML.Callback.OnProgressCallback)">
            <summary>
            下载进度回调
            </summary>
            <param name="progressCallback"></param>
        </member>
        <member name="M:COSXML.Model.Object.GetObjectRequest.SetLocalFileOffset(System.Int64)">
            <summary>
            保存文件的本地偏移位置，下载的数据从此处开始append该文件后面
            </summary>
            <param name="localFileOffset"></param>
        </member>
        <member name="M:COSXML.Model.Object.GetObjectRequest.SetRange(System.Int64,System.Int64)">
            <summary>
            下载内容范围
            </summary>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="M:COSXML.Model.Object.GetObjectRequest.SetRange(System.Int64)">
            <summary>
            下载内容的起始偏移量
            </summary>
            <param name="start"></param>
        </member>
        <member name="M:COSXML.Model.Object.GetObjectRequest.SetVersionId(System.String)">
            <summary>
            下载特定版本的对象
            </summary>
            <param name="versionId"></param>
        </member>
        <member name="M:COSXML.Model.Object.GetObjectRequest.SetResponseContentType(System.String)">
            <summary>
            响应头部中的 Content-Type 参数
            </summary>
            <param name="responseContentType"></param>
        </member>
        <member name="M:COSXML.Model.Object.GetObjectRequest.SetResponseContentLanguage(System.String)">
            <summary>
            响应头部中的 Content-Language 参数
            </summary>
            <param name="responseContentLanguage"></param>
        </member>
        <member name="M:COSXML.Model.Object.GetObjectRequest.SetResponseCacheControl(System.String)">
            <summary>
            响应头部中的 Cache-Control 参数
            </summary>
            <param name="responseCacheControl"></param>
        </member>
        <member name="M:COSXML.Model.Object.GetObjectRequest.SetResponseContentDisposition(System.String)">
            <summary>
            响应头部中的 Content-Disposition 参数
            </summary>
            <param name="responseDisposition"></param>
        </member>
        <member name="M:COSXML.Model.Object.GetObjectRequest.SetResponseContentEncoding(System.String)">
            <summary>
            响应头部中的 Content-Encoding 参数
            </summary>
            <param name="responseContentEncoding"></param>
        </member>
        <member name="M:COSXML.Model.Object.GetObjectRequest.SetResponseExpires(System.String)">
            <summary>
            响应头部中的 Content-Expires 参数
            </summary>
            <param name="responseExpires"></param>
        </member>
        <member name="M:COSXML.Model.Object.GetObjectRequest.GetSaveFilePath">
            <summary>
            获取本地文件保存路径
            </summary>
            <returns></returns>
        </member>
        <member name="T:COSXML.Model.Object.GetObjectResult">
            <summary>
            下载对象返回的结果
            <see cref="!:https://cloud.tencent.com/document/product/436/7753"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.GetObjectResult.eTag">
            <summary>
            对象的 eTag
            </summary>
        </member>
        <member name="T:COSXML.Model.Object.HeadObjectRequest">
            <summary>
            检索 对象 的 meta 信息数据
            <see cref="!:https://cloud.tencent.com/document/product/436/7745"/>
            </summary>
        </member>
        <member name="M:COSXML.Model.Object.HeadObjectRequest.SetVersionId(System.String)">
            <summary>
            特定版本的对象
            </summary>
            <param name="versionId"></param>
        </member>
        <member name="M:COSXML.Model.Object.HeadObjectRequest.SetIfModifiedSince(System.String)">
            <summary>
            当 Object 在指定时间后被修改，则返回对应 Object 的 meta 信息，否则返回 304
            </summary>
            <param name="ifModifiedSince"></param>
        </member>
        <member name="T:COSXML.Model.Object.HeadObjectResult">
            <summary>
            检索对象返回的结果
            <see cref="!:https://cloud.tencent.com/document/product/436/7745"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.HeadObjectResult.cosObjectType">
            <summary>
            用来表示 Object 是否可以被追加上传，枚举值：normal 或者 appendable
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.HeadObjectResult.cosStorageClass">
            <summary>
            Object 的存储级别，枚举值：STANDARD,STANDARD_IA
            <see cref="T:COSXML.Common.CosStorageClass"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.HeadObjectResult.size">
            <summary>
            对象的长度
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.HeadObjectResult.eTag">
            <summary>
            对象的eTag
            </summary>
        </member>
        <member name="T:COSXML.Model.Object.InitMultipartUploadRequest">
            <summary>
            实现初始化分片上传，成功执行此请求以后会返回 UploadId 用于后续的 Upload Part 请求
            <see cref="!:https://cloud.tencent.com/document/product/436/7746"/>
            </summary>
        </member>
        <member name="M:COSXML.Model.Object.InitMultipartUploadRequest.SetCacheControl(System.String)">
            <summary>
            定义的缓存策略，将作为 Object 元数据保存
            </summary>
            <param name="cacheControl"></param>
        </member>
        <member name="M:COSXML.Model.Object.InitMultipartUploadRequest.SetContentDisposition(System.String)">
            <summary>
            定义的文件名称，将作为 Object 元数据保存
            </summary>
            <param name="contentDisposition"></param>
        </member>
        <member name="M:COSXML.Model.Object.InitMultipartUploadRequest.SetContentEncoding(System.String)">
            <summary>
            定义的编码格式，将作为 Object 元数据保存
            </summary>
            <param name="contentEncoding"></param>
        </member>
        <member name="M:COSXML.Model.Object.InitMultipartUploadRequest.SetExpires(System.String)">
            <summary>
            定义的内容类型（MIME），将作为 Object 元数据保存
            </summary>
            <param name="expires"></param>
        </member>
        <member name="M:COSXML.Model.Object.InitMultipartUploadRequest.SetCosACL(System.String)">
            <summary>
            Object 的 ACL 属性，有效值：private，public-read-write，public-read，
            default；默认值：default(继承 Bucket 权限)
            当前访问策略条目限制为 1000 条，
            如果您不需要进行 Object ACL 控制，请填 default 或者此项不进行设置，
            默认继承 Bucket 权限
            <see cref="T:COSXML.Common.CosACL"/>
            </summary>
            <param name="cosACL"></param>
        </member>
        <member name="M:COSXML.Model.Object.InitMultipartUploadRequest.SetCosACL(COSXML.Common.CosACL)">
            Object 的 ACL 属性，有效值：private，public-read-write，public-read，
            default；默认值：default(继承 Bucket 权限)
            当前访问策略条目限制为 1000 条，
            如果您不需要进行 Object ACL 控制，请填 default 或者此项不进行设置，
            默认继承 Bucket 权限
            <see cref="T:COSXML.Common.CosACL"/>
        </member>
        <member name="M:COSXML.Model.Object.InitMultipartUploadRequest.SetXCosGrantRead(COSXML.Model.Tag.GrantAccount)">
            <summary>
            赋予被授权者读的权限
            <see cref="T:COSXML.Model.Tag.GrantAccount"/>
            </summary>
            <param name="grantAccount"></param>
        </member>
        <member name="M:COSXML.Model.Object.InitMultipartUploadRequest.SetXCosGrantWrite(COSXML.Model.Tag.GrantAccount)">
            <summary>
            赋予被授权者写的权限
            <see cref="T:COSXML.Model.Tag.GrantAccount"/>
            </summary>
            <param name="grantAccount"></param>
        </member>
        <member name="M:COSXML.Model.Object.InitMultipartUploadRequest.SetXCosReadWrite(COSXML.Model.Tag.GrantAccount)">
            <summary>
            赋予被授权者读写的权限
            <see cref="T:COSXML.Model.Tag.GrantAccount"/>
            </summary>
            <param name="grantAccount"></param>
        </member>
        <member name="T:COSXML.Model.Object.InitMultipartUploadResult">
            <summary>
            实现初始化分片上传返回的结果
            <see cref="!:https://cloud.tencent.com/document/product/436/7746"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.InitMultipartUploadResult.initMultipartUpload">
            <summary>
            返回信息
            <see cref="T:COSXML.Model.Tag.InitiateMultipartUpload"/>
            </summary>
        </member>
        <member name="T:COSXML.Model.Object.ListPartsRequest">
            <summary>
            查询特定分块上传中的已上传的块
            <see cref="!:https://cloud.tencent.com/document/product/436/7747"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.ListPartsRequest.uploadId">
            <summary>
            标识本次分块上传的 ID
            </summary>
        </member>
        <member name="M:COSXML.Model.Object.ListPartsRequest.SetMaxParts(System.Int32)">
            <summary>
            单次返回最大的条目数量，默认 1000
            </summary>
            <param name="maxParts"></param>
        </member>
        <member name="M:COSXML.Model.Object.ListPartsRequest.SetPartNumberMarker(System.Int32)">
            <summary>
            默认以 UTF-8 二进制顺序列出条目，所有列出条目从 marker 开始
            </summary>
            <param name="partNumberMarker"></param>
        </member>
        <member name="M:COSXML.Model.Object.ListPartsRequest.SetEncodingType(System.String)">
            <summary>
            规定返回值的编码方式
            </summary>
            <param name="encodingType"></param>
        </member>
        <member name="T:COSXML.Model.Object.ListPartsResult">
            <summary>
            查询特定分块上传中的已上传的块返回的结果
            <see cref="!:https://cloud.tencent.com/document/product/436/7747"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.ListPartsResult.listParts">
            <summary>
            已上传块的所有信息
            <see cref="T:COSXML.Model.Tag.ListParts"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.ObjectRequest.bucket">
            <summary>
            存储桶名称(Bucket)
            <see cref="!:https://cloud.tencent.com/document/product/436/7751"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.ObjectRequest.region">
            <summary>
            Bucket 所在的地域
            <see cref="T:COSXML.Common.CosRegion"/>
            </summary>
        </member>
        <member name="P:COSXML.Model.Object.ObjectRequest.Bucket">
            <summary>
            Object 所属的 Bucket
            </summary>
        </member>
        <member name="P:COSXML.Model.Object.ObjectRequest.Region">
            <summary>
            Bucket 所在的地域
            <see cref="T:COSXML.Common.CosRegion"/>
            </summary>
        </member>
        <member name="M:COSXML.Model.Object.ObjectRequest.SetCosPath(System.String)">
            <summary>
            object 名称，对象键
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:COSXML.Model.Object.ObjectRequest.SetCosServerSideEncryption">
            <summary>
            cos 服务端加密
            </summary>
        </member>
        <member name="M:COSXML.Model.Object.ObjectRequest.SetCosServerSideEncryptionWithCustomerKey(System.String)">
            <summary>
            
            </summary>
            <param name="customerKey"></param>
        </member>
        <member name="T:COSXML.Model.Object.OptionObjectRequest">
            <summary>
            实现 Object 跨域访问配置的预请求
            <see cref="!:https://cloud.tencent.com/document/product/436/8288"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.OptionObjectRequest.origin">
            <summary>
            模拟跨域访问的请求来源域名
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.OptionObjectRequest.accessControlMethod">
            <summary>
            模拟跨域访问的请求 HTTP 方法
            </summary>
        </member>
        <member name="M:COSXML.Model.Object.OptionObjectRequest.SetOrigin(System.String)">
            <summary>
            模拟跨域访问的请求来源域名
            </summary>
            <param name="origin"></param>
        </member>
        <member name="M:COSXML.Model.Object.OptionObjectRequest.SetAccessControlMethod(System.String)">
            <summary>
            模拟跨域访问的请求 HTTP 方法
            </summary>
            <param name="accessControlMethod"></param>
        </member>
        <member name="M:COSXML.Model.Object.OptionObjectRequest.SetAccessControlHeaders(System.Collections.Generic.List{System.String})">
            <summary>
            模拟跨域访问的请求头部
            </summary>
            <param name="accessControlHeaders"></param>
        </member>
        <member name="T:COSXML.Model.Object.OptionObjectResult">
            <summary>
            实现 Object 跨域访问配置的预请求
            <see cref="!:https://cloud.tencent.com/document/product/436/8288"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.OptionObjectResult.accessControlAllowOrigin">
            <summary>
            跨域访问的请求来源域名
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.OptionObjectResult.accessControlMaxAge">
            <summary>
            OPTIONS 请求得到结果的有效期
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.OptionObjectResult.accessControlAllowHeaders">
            <summary>
            跨域访问的允许请求头部
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.OptionObjectResult.accessControlAllowMethods">
            <summary>
            跨域访问的允许请求 HTTP 方法
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.OptionObjectResult.accessControlAllowExposeHeaders">
            <summary>
            跨域访问的允许请求自定义头部
            </summary>
        </member>
        <member name="T:COSXML.Model.Object.PostObjectRequest">
            <summary>
            使用者用表单的形式将文件（Object）上传至指定 Bucket 中.
            <see cref="!:https://cloud.tencent.com/document/product/436/14690"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.PostObjectRequest.formStruct">
            <summary>
            表单字段
            <see cref="T:COSXML.Model.Object.PostObjectRequest.FormStruct"/>
            </summary>
        </member>
        <member name="M:COSXML.Model.Object.PostObjectRequest.#ctor(System.String,System.String,System.String)">
            <summary>
            上传文件
            </summary>
            <param name="bucket"></param>
            <param name="key"></param>
            <param name="srcPath"></param>
        </member>
        <member name="M:COSXML.Model.Object.PostObjectRequest.#ctor(System.String,System.String,System.String,System.Int64,System.Int64)">
            <summary>
            上传文件的指定部分
            </summary>
            <param name="bucket"></param>
            <param name="key"></param>
            <param name="srcPath"></param>
            <param name="fileOffset">指定文件内容的起始位置</param>
            <param name="sendContentLength">指定文件内容的大小</param>
        </member>
        <member name="M:COSXML.Model.Object.PostObjectRequest.#ctor(System.String,System.String,System.Byte[])">
            <summary>
            上传data数据
            </summary>
            <param name="bucket"></param>
            <param name="key"></param>
            <param name="data"></param>
        </member>
        <member name="M:COSXML.Model.Object.PostObjectRequest.SetCosProgressCallback(COSXML.Callback.OnProgressCallback)">
            <summary>
            设置进度回调
            </summary>
            <param name="progressCallback"></param>
        </member>
        <member name="M:COSXML.Model.Object.PostObjectRequest.SetCosACL(COSXML.Common.CosACL)">
            <summary>
            定义 Object 的 acl 属性。有效值：private，public-read-write，public-read；默认值：private
            <see cref="T:COSXML.Common.CosACL"/>
            </summary>
            <param name="cosACL"></param>
        </member>
        <member name="M:COSXML.Model.Object.PostObjectRequest.SetCacheControl(System.String)">
            <summary>
            设置对象的 cacheControl
            </summary>
            <param name="cacheControl"></param>
        </member>
        <member name="M:COSXML.Model.Object.PostObjectRequest.SetContentType(System.String)">
            <summary>
            设置对象的contentType
            </summary>
            <param name="contentType"></param>
        </member>
        <member name="M:COSXML.Model.Object.PostObjectRequest.SetContentDisposition(System.String)">
            <summary>
            设置对象的contentDisposition
            </summary>
            <param name="contentDisposition"></param>
        </member>
        <member name="M:COSXML.Model.Object.PostObjectRequest.SetContentEncoding(System.String)">
            <summary>
            设置对象的contentEncoding
            </summary>
            <param name="contentEncoding"></param>
        </member>
        <member name="M:COSXML.Model.Object.PostObjectRequest.SetExpires(System.String)">
            <summary>
            设置对象 Expire
            </summary>
            <param name="expires"></param>
        </member>
        <member name="M:COSXML.Model.Object.PostObjectRequest.SetHeader(System.String,System.String)">
            <summary>
            设置对象header属性
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:COSXML.Model.Object.PostObjectRequest.SetCustomerHeader(System.String,System.String)">
            <summary>
            设置对象自定义的header属性
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:COSXML.Model.Object.PostObjectRequest.SetCosStorageClass(System.String)">
            <summary>
            设置对象的存储类型
            <see cref="T:COSXML.Common.CosStorageClass"/>
            </summary>
            <param name="cosStorageClass"></param>
        </member>
        <!-- 对于成员“M:COSXML.Model.Object.PostObjectRequest.SetSuccessActionRedirect(System.String)”忽略有格式错误的 XML 注释 -->
        <member name="M:COSXML.Model.Object.PostObjectRequest.SetSuccessActionStatus(System.Int32)">
            <summary>
            successHttpCode can be 200, 201, 204, default value 204
            若填写 success_action_redirect 则会略此设置。
            </summary>
            <param name="successHttpCode"></param>
        </member>
        <member name="M:COSXML.Model.Object.PostObjectRequest.SetPolicy(COSXML.Model.Object.PostObjectRequest.Policy)">
            <summary>
            用于做请求检查，如果请求的内容和 Policy 指定的条件不符，返回 403 AccessDenied。
            <see cref="T:COSXML.Model.Object.PostObjectRequest.Policy"/>
            </summary>
            <param name="policy"></param>
        </member>
        <member name="F:COSXML.Model.Object.PostObjectRequest.FormStruct.acl">
            <summary>
            对象的ACL
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.PostObjectRequest.FormStruct.headers">
            <summary>
            对象的header元数据
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.PostObjectRequest.FormStruct.key">
            <summary>
            上传后的文件名，使用 ${filename} 则会进行替换。
            例如a/b/${filename}，上传文件 a1.txt，那么最终的上传路径就是 a/b/a1.txt
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.PostObjectRequest.FormStruct.successActionRedirect">
            <summary>
            若设置优先生效，返回 303 并提供 Location 头部
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.PostObjectRequest.FormStruct.successActionStatus">
            <summary>
            可选 200，201，204 默认返回 204。若填写 success_action_redirect 则会略此设置。
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.PostObjectRequest.FormStruct.customHeaders">
            <summary>
            对象的自定义元数据
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.PostObjectRequest.FormStruct.xCosStorageClass">
            <summary>
            对象存储类型
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.PostObjectRequest.FormStruct.sign">
            <summary>
            签名串
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.PostObjectRequest.FormStruct.policy">
            <summary>
            请求检查策略
            <see cref="T:COSXML.Model.Object.PostObjectRequest.Policy"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.PostObjectRequest.FormStruct.srcPath">
            <summary>
            上传文件的本地路径
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.PostObjectRequest.FormStruct.fileOffset">
            <summary>
            上传文件指定起始位置
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.PostObjectRequest.FormStruct.contentLength">
            <summary>
            上传文件指定内容大小
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.PostObjectRequest.FormStruct.data">
            <summary>
            上传data数据
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.PostObjectRequest.FormStruct.progressCallback">
            <summary>
            上传回调
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.PostObjectRequest.Policy.expiration">
            <summary>
            过期时间
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.PostObjectRequest.Policy.conditions">
            <summary>
            检查条件
            </summary>
        </member>
        <member name="T:COSXML.Model.Object.PostObjectResult">
            <summary>
            使用者用表单的形式将文件（Object）上传至指定 Bucket 中.
            <see cref="!:https://cloud.tencent.com/document/product/436/14690"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.PostObjectResult.eTag">
            <summary>
            对象的eTag
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.PostObjectResult.location">
            <summary>
            若指定了上传 success_action_redirect 则返回对应的值，若无指定则返回对象完整的路径
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.PostObjectResult.postResponse">
            <summary>
            post object返回的信息
            <see cref="T:COSXML.Model.Tag.PostResponse"/>
            </summary>
        </member>
        <member name="T:COSXML.Model.Object.PutObjectACLRequest">
            <summary>
            设置 对象 的ACL
            <see cref="!:https://cloud.tencent.com/document/product/436/7748"/>
            </summary>
        </member>
        <member name="M:COSXML.Model.Object.PutObjectACLRequest.SetCosACL(System.String)">
            <summary>
            定义 Object 的 acl 属性。有效值：private，public-read-write，public-read；默认值：private
            <see cref="T:COSXML.Common.CosACL"/>
            </summary>
            <param name="cosACL"></param>
        </member>
        <member name="M:COSXML.Model.Object.PutObjectACLRequest.SetCosACL(COSXML.Common.CosACL)">
            <summary>
            定义 Object 的 acl 属性。有效值：private，public-read-write，public-read；默认值：private
            <see cref="T:COSXML.Common.CosACL"/> 
            </summary>
            <param name="cosACL"></param>
        </member>
        <member name="M:COSXML.Model.Object.PutObjectACLRequest.SetXCosGrantRead(COSXML.Model.Tag.GrantAccount)">
            <summary>
            赋予被授权者读的权限
            <see cref="T:COSXML.Model.Tag.GrantAccount"/>
            </summary>
            <param name="grantAccount"></param>
        </member>
        <member name="M:COSXML.Model.Object.PutObjectACLRequest.SetXCosGrantWrite(COSXML.Model.Tag.GrantAccount)">
            <summary>
            赋予被授权者写的权限
            <see cref="T:COSXML.Model.Tag.GrantAccount"/>
            </summary>
            <param name="grantAccount"></param>
        </member>
        <member name="M:COSXML.Model.Object.PutObjectACLRequest.SetXCosReadWrite(COSXML.Model.Tag.GrantAccount)">
            <summary>
            赋予被授权者所有的权限
            <see cref="T:COSXML.Model.Tag.GrantAccount"/>
            </summary>
            <param name="grantAccount"></param>
        </member>
        <member name="T:COSXML.Model.Object.PutObjectACLResult">
            <summary>
            设置 对象 的ACL返回的结果
            <see cref="!:https://cloud.tencent.com/document/product/436/7748"/>
            </summary>
        </member>
        <member name="T:COSXML.Model.Object.PutObjectRequest">
            <summary>
            简单上传对象
            <see cref="!:https://cloud.tencent.com/document/product/436/7749"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.PutObjectRequest.srcPath">
            <summary>
            本地文件路径
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.PutObjectRequest.fileOffset">
            <summary>
            上传文件指定起始位置
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.PutObjectRequest.data">
            <summary>
            上传data数据
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.PutObjectRequest.contentLength">
            <summary>
            上传指定内容的长度
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.PutObjectRequest.progressCallback">
            <summary>
            上传回调
            </summary>
        </member>
        <member name="M:COSXML.Model.Object.PutObjectRequest.#ctor(System.String,System.String,System.String)">
            <summary>
            上传整个文件
            </summary>
            <param name="bucket"></param>
            <param name="key"></param>
            <param name="srcPath"></param>
        </member>
        <member name="M:COSXML.Model.Object.PutObjectRequest.#ctor(System.String,System.String,System.String,System.Int64,System.Int64)">
            <summary>
            上传文件的指定内容
            </summary>
            <param name="bucket"></param>
            <param name="key"></param>
            <param name="srcPath"></param>
            <param name="fileOffset">文件指定起始位置</param>
            <param name="needSendLength">文件指定内容长度</param>
        </member>
        <member name="M:COSXML.Model.Object.PutObjectRequest.#ctor(System.String,System.String,System.Byte[])">
            <summary>
            上传data数据
            </summary>
            <param name="bucket"></param>
            <param name="key"></param>
            <param name="data"></param>
        </member>
        <member name="M:COSXML.Model.Object.PutObjectRequest.SetCosProgressCallback(COSXML.Callback.OnProgressCallback)">
            <summary>
            上传回调
            </summary>
            <param name="progressCallback"></param>
        </member>
        <member name="M:COSXML.Model.Object.PutObjectRequest.SetCosACL(System.String)">
            <summary>
            定义 Object 的 acl 属性。有效值：private，public-read-write，public-read；默认值：private
            <see cref="T:COSXML.Common.CosACL"/>
            </summary>
            <param name="cosACL"></param>
        </member>
        <member name="M:COSXML.Model.Object.PutObjectRequest.SetCosACL(COSXML.Common.CosACL)">
            <summary>
            定义 Object 的 acl 属性。有效值：private，public-read-write，public-read；默认值：private
            <see cref="T:COSXML.Common.CosACL"/>
            </summary>
            <param name="cosACL"></param>
        </member>
        <member name="M:COSXML.Model.Object.PutObjectRequest.SetXCosGrantRead(COSXML.Model.Tag.GrantAccount)">
            <summary>
            赋予被授权者读的权限
            <see cref="T:COSXML.Model.Tag.GrantAccount"/>
            </summary>
            <param name="grantAccount"></param>
        </member>
        <member name="M:COSXML.Model.Object.PutObjectRequest.SetXCosGrantWrite(COSXML.Model.Tag.GrantAccount)">
            <summary>
            赋予被授权者写的权限
            <see cref="T:COSXML.Model.Tag.GrantAccount"/>
            </summary>
            <param name="grantAccount"></param>
        </member>
        <member name="M:COSXML.Model.Object.PutObjectRequest.SetXCosReadWrite(COSXML.Model.Tag.GrantAccount)">
            <summary>
            赋予被授权者所有的权限
            <see cref="T:COSXML.Model.Tag.GrantAccount"/>
            </summary>
            <param name="grantAccount"></param>
        </member>
        <member name="T:COSXML.Model.Object.PutObjectResult">
            <summary>
            简单上传对象返回的结果
            <see cref="!:https://cloud.tencent.com/document/product/436/7749"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.PutObjectResult.eTag">
            <summary>
            对象的eTag
            </summary>
        </member>
        <member name="T:COSXML.Model.Object.RestoreObjectRequest">
            <summary>
            对一个通过 COS 归档为 archive 类型的对象进行恢复
            <see cref="!:https://cloud.tencent.com/document/product/436/12633"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.RestoreObjectRequest.restoreConfigure">
            <summary>
            用于恢复数据的配置
            <see cref="T:COSXML.Model.Tag.RestoreConfigure"/>
            </summary>
        </member>
        <member name="M:COSXML.Model.Object.RestoreObjectRequest.SetExpireDays(System.Int32)">
            <summary>
            设置临时副本的过期时间
            </summary>
            <param name="days"></param>
        </member>
        <member name="M:COSXML.Model.Object.RestoreObjectRequest.SetTier(COSXML.Model.Tag.RestoreConfigure.Tier)">
            <summary>
            恢复数据时，Tier 可以指定为 CAS 支持的三种恢复类型，分别为 Expedited、Standard、Bulk
            <see cref="T:COSXML.Model.Tag.RestoreConfigure.Tier"/>
            </summary>
            <param name="tier"></param>
        </member>
        <member name="T:COSXML.Model.Object.RestoreObjectResult">
            <summary>
            对一个通过 COS 归档为 archive 类型的对象进行恢复返回的结果
            <see cref="!:https://cloud.tencent.com/document/product/436/12633"/>
            </summary>
        </member>
        <member name="T:COSXML.Model.Object.UploadPartCopyRequest">
            <summary>
            分片复制
            <see cref="!:https://cloud.tencent.com/document/product/436/12633"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.UploadPartCopyRequest.copySourceStruct">
            <summary>
            拷贝的数据源
            <see cref="T:COSXML.Model.Tag.CopySourceStruct"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.UploadPartCopyRequest.partNumber">
            Specified part number
        </member>
        <member name="F:COSXML.Model.Object.UploadPartCopyRequest.uploadId">
            init upload generate' s uploadId by service
        </member>
        <member name="M:COSXML.Model.Object.UploadPartCopyRequest.SetCopySource(COSXML.Model.Tag.CopySourceStruct)">
            <summary>
            设置拷贝数据源
            <see cref="T:COSXML.Model.Tag.CopySourceStruct"/>
            </summary>
            <param name="copySource"></param>
        </member>
        <member name="M:COSXML.Model.Object.UploadPartCopyRequest.SetCopyRange(System.Int64,System.Int64)">
            <summary>
            设置拷贝的分片范围
            </summary>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="M:COSXML.Model.Object.UploadPartCopyRequest.SetCopyIfModifiedSince(System.String)">
            <summary>
            当 Object 在指定时间后被修改，则执行操作，否则返回 412。
            可与 x-cos-copy-source-If-None-Match 一起使用，与其他条件联合使用返回冲突
            </summary>
            <param name="sourceIfModifiedSince"></param>
        </member>
        <member name="M:COSXML.Model.Object.UploadPartCopyRequest.SetCopyIfUnmodifiedSince(System.String)">
            <summary>
            当 Object 在指定时间后未被修改，则执行操作，否则返回 412。
            可与 x-cos-copy-source-If-Match 一起使用，与其他条件联合使用返回冲突。
            </summary>
            <param name="sourceIfUnmodifiedSince"></param>
        </member>
        <member name="M:COSXML.Model.Object.UploadPartCopyRequest.SetCopyIfMatch(System.String)">
            <summary>
             Object 的 Etag 和给定一致时，则执行操作，否则返回 412。
             可与 x-cos-copy-source-If-Unmodified-Since 一起使用，与其他条件联合使用返回冲突。
            </summary>
            <param name="eTag"></param>
        </member>
        <member name="M:COSXML.Model.Object.UploadPartCopyRequest.SetCopyIfNoneMatch(System.String)">
            <summary>
            当 Object 的 Etag 和给定不一致时，则执行操作，否则返回 412。
            可与 x-cos-copy-source-If-Modified-Since 一起使用，与其他条件联合使用返回冲突
            </summary>
            <param name="eTag"></param>
        </member>
        <member name="T:COSXML.Model.Object.UploadPartCopyResult">
            <summary>
            分片复制返回的结果
            <see cref="!:https://cloud.tencent.com/document/product/436/12633"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.UploadPartCopyResult.copyObject">
            <summary>
            分片复制的结果信息
            <see cref="T:COSXML.Model.Tag.CopyObject"/>
            </summary>
        </member>
        <member name="T:COSXML.Model.Object.UploadPartRequest">
            <summary>
            分片上传
            <see cref="!:https://cloud.tencent.com/document/product/436/7750"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.UploadPartRequest.partNumber">
            <summary>
            分片块编号
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.UploadPartRequest.uploadId">
            <summary>
            分片上传的UploadId
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.UploadPartRequest.srcPath">
            <summary>
            本地文件路径
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.UploadPartRequest.fileOffset">
            <summary>
            上传文件指定起始位置
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.UploadPartRequest.contentLength">
            <summary>
            上传指定内容的长度
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.UploadPartRequest.data">
            <summary>
            上传data数据
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.UploadPartRequest.progressCallback">
            <summary>
            上传回调
            </summary>
        </member>
        <member name="M:COSXML.Model.Object.UploadPartRequest.#ctor(System.String,System.String,System.Int32,System.String,System.String,System.Int64,System.Int64)">
            <summary>
            上传文件的指定内容
            </summary>
            <param name="bucket"></param>
            <param name="key"></param>
            <param name="partNumber"></param>
            <param name="uploadId"></param>
            <param name="srcPath"></param>
            <param name="fileOffset">文件指定起始位置</param>
            <param name="fileSendLength">文件指定内容长度</param>
        </member>
        <member name="M:COSXML.Model.Object.UploadPartRequest.#ctor(System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            上传整个文件
            </summary>
            <param name="bucket"></param>
            <param name="key"></param>
            <param name="partNumber"></param>
            <param name="uploadId"></param>
            <param name="srcPath"></param>
        </member>
        <member name="M:COSXML.Model.Object.UploadPartRequest.#ctor(System.String,System.String,System.Int32,System.String,System.Byte[])">
            <summary>
            上传data数据
            </summary>
            <param name="bucket"></param>
            <param name="key"></param>
            <param name="partNumber"></param>
            <param name="uploadId"></param>
            <param name="data"></param>
        </member>
        <member name="M:COSXML.Model.Object.UploadPartRequest.SetPartNumber(System.Int32)">
            <summary>
            设置分片块编号
            </summary>
            <param name="partNumber"></param>
        </member>
        <member name="M:COSXML.Model.Object.UploadPartRequest.SetUploadId(System.String)">
            <summary>
            设置上传的UploadId
            </summary>
            <param name="uploadId"></param>
        </member>
        <member name="M:COSXML.Model.Object.UploadPartRequest.SetCosProgressCallback(COSXML.Callback.OnProgressCallback)">
            <summary>
            设置回调
            </summary>
            <param name="progressCallback"></param>
        </member>
        <member name="T:COSXML.Model.Object.UploadPartResult">
            <summary>
            分片上传返回的结果
            <see cref="!:https://cloud.tencent.com/document/product/436/7750"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Object.UploadPartResult.eTag">
            <summary>
            分片块的eTag
            </summary>
        </member>
        <member name="T:COSXML.Model.Service.GetServiceRequest">
            <summary>
            获取所有 Bucket 列表
            <see cref="!:https://cloud.tencent.com/document/product/436/8291"/>
            </summary>
        </member>
        <member name="T:COSXML.Model.Service.GetServiceResult">
            <summary>
            获取所有 Bucket 列表返回的结果
            <see cref="!:https://cloud.tencent.com/document/product/436/8291"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Service.GetServiceResult.listAllMyBuckets">
            <summary>
            list all buckets for users
            <see cref="T:COSXML.Model.Tag.ListAllMyBuckets"/>
            </summary>
        </member>
        <member name="T:COSXML.Model.Tag.AccessControlPolicy">
            <summary>
            <see cref="!:https://cloud.tencent.com/document/product/436/7733"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.AccessControlPolicy.owner">
            <summary>
            Bucket 持有者信息
            <see cref="T:COSXML.Model.Tag.AccessControlPolicy.Owner"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.AccessControlPolicy.accessControlList">
            <summary>
            被授权者信息与权限信息
            <see cref="T:COSXML.Model.Tag.AccessControlPolicy.AccessControlList"/>
            </summary>
        </member>
        <!-- 对于成员“F:COSXML.Model.Tag.AccessControlPolicy.Owner.id”忽略有格式错误的 XML 注释 -->
        <member name="F:COSXML.Model.Tag.AccessControlPolicy.Owner.displayName">
            <summary>
            Bucket 持有者的名称
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.AccessControlPolicy.AccessControlList.grants">
            <summary>
            单个 Bucket 的授权信息。一个 AccessControlList 可以拥有 100 条 Grant
            <see cref="T:COSXML.Model.Tag.AccessControlPolicy.Grant"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.AccessControlPolicy.Grant.grantee">
            <summary>
            说明被授权者的信息,
            <see cref="T:COSXML.Model.Tag.AccessControlPolicy.Grantee"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.AccessControlPolicy.Grant.permission">
            <summary>
            指明授予被授权者的权限信息
            <see cref="T:COSXML.Common.CosGrantPermission"/>
            </summary>
        </member>
        <!-- 对于成员“F:COSXML.Model.Tag.AccessControlPolicy.Grantee.id”忽略有格式错误的 XML 注释 -->
        <member name="F:COSXML.Model.Tag.AccessControlPolicy.Grantee.displayName">
            <summary>
            用户的名称
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.AccessControlPolicy.Grantee.uri">
            <summary>
            或 qcs::cam::anyone:anyone （指代所有用户）.
            </summary>
        </member>
        <member name="T:COSXML.Model.Tag.CompleteMultipartUpload">
            <summary>
            本次分块上传的所有信息
            <see cref="!:https://cloud.tencent.com/document/product/436/7742"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.CompleteMultipartUpload.parts">
            <summary>
            本次分块上传中每个块的信息
            <see cref="T:COSXML.Model.Tag.CompleteMultipartUpload.Part"/>
            </summary>
        </member>
        <member name="T:COSXML.Model.Tag.CompleteMultipartUpload.Part">
            本块编号 和 eTag值
        </member>
        <member name="F:COSXML.Model.Tag.CompleteMultipartUpload.Part.partNumber">
            <summary>
            块编号
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.CompleteMultipartUpload.Part.eTag">
            <summary>
            每个块文件的 eTag 值
            </summary>
        </member>
        <member name="T:COSXML.Model.Tag.CompleteResult">
            <summary>
            <see cref="!:https://cloud.tencent.com/document/product/436/7742"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.CompleteResult.location">
            <summary>
            创建的Object的外网访问域名
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.CompleteResult.bucket">
            <summary>
            分块上传的目标Bucket
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.CompleteResult.key">
            <summary>
            Object的名称
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.CompleteResult.eTag">
            <summary>
            合并后对象的唯一标签值，该值不是对象内容的 MD5 校验值，仅能用于检查对象唯一性
            </summary>
        </member>
        <member name="T:COSXML.Model.Tag.CopyObject">
            <summary>
            复制结果返回信息
            <see cref="!:https://cloud.tencent.com/document/product/436/10881"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.CopyObject.eTag">
            <summary>
            返回文件的 MD5 算法校验值。ETag 的值可以用于检查 Object 的内容是否发生变化
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.CopyObject.lastModified">
            <summary>
            返回文件最后修改时间，GMT 格式
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.CopyObject.versionId">
            <summary>
            key 的 versionId
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.CopySourceStruct.appid">
            <summary>
            cos 服务的appid
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.CopySourceStruct.bucket">
            <summary>
            存储桶名称
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.CopySourceStruct.region">
            <summary>
            Bucket所属地域
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.CopySourceStruct.key">
            <summary>
            对象键
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.CopySourceStruct.versionId">
            <summary>
            对象的版本ID
            </summary>
        </member>
        <member name="M:COSXML.Model.Tag.CopySourceStruct.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            copy source with versionId
            </summary>
            <param name="appid"></param>
            <param name="bucket"></param>
            <param name="region"></param>
            <param name="key"></param>
            <param name="versionId"></param>
        </member>
        <member name="M:COSXML.Model.Tag.CopySourceStruct.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            copy source
            </summary>
            <param name="appid"></param>
            <param name="bucket"></param>
            <param name="region"></param>
            <param name="key"></param>
        </member>
        <member name="M:COSXML.Model.Tag.CopySourceStruct.CheckParameters">
            <summary>
            check parameter
            </summary>
        </member>
        <member name="M:COSXML.Model.Tag.CopySourceStruct.GetCopySouce">
            <summary>
            get source with urlEncode
            </summary>
            <returns></returns>
        </member>
        <member name="T:COSXML.Model.Tag.CORSConfiguration">
            <summary>
            <see cref="!:https://cloud.tencent.com/document/product/436/8274"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.CORSConfiguration.corsRules">
            <summary>
            跨域资源共享配置的信息，最多可以包含100条 CORSRule
            <see cref="T:COSXML.Model.Tag.CORSConfiguration.CORSRule"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.CORSConfiguration.CORSRule.id">
            <summary>
            配置规则的 ID，可选填
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.CORSConfiguration.CORSRule.allowedOrigin">
            <summary>
            允许的访问来源，支持通配符 *, 格式为：协议://域名[:端口]如：http://www.qq.com
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.CORSConfiguration.CORSRule.allowedMethods">
            <summary>
            允许的 HTTP 操作，枚举值：GET，PUT，HEAD，POST，DELETE
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.CORSConfiguration.CORSRule.allowedHeaders">
            <summary>
            在发送 OPTIONS 请求时告知服务端，接下来的请求可以使用哪些自定义的 HTTP 请求头部，支持通配符 *
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.CORSConfiguration.CORSRule.exposeHeaders">
            <summary>
            设置浏览器可以接收到的来自服务器端的自定义头部信息
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.CORSConfiguration.CORSRule.maxAgeSeconds">
            <summary>
            设置 OPTIONS 请求得到结果的有效期
            </summary>
        </member>
        <member name="T:COSXML.Model.Tag.CosServerError">
            <summary>
            cos server 返回的错误信息
            <see cref="!:https://cloud.tencent.com/document/product/436/7730"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.CosServerError.code">
            <summary>
            错误码
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.CosServerError.message">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.CosServerError.resource">
            <summary>
            资源地址
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.CosServerError.requestId">
            <summary>
            请求ID
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.CosServerError.traceId">
            <summary>
            错误ID
            </summary>
        </member>
        <member name="T:COSXML.Model.Tag.DeleteResult">
            <summary>
            本次删除返回结果的方式和目标 Object
            <see cref="!:https://cloud.tencent.com/document/product/436/8289"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.DeleteResult.deletedList">
            <summary>
            本次删除的成功 Object 信息
            <see cref="T:COSXML.Model.Tag.DeleteResult.Deleted"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.DeleteResult.errorList">
            <summary>
            本次删除的失败 Object 信息
            <see cref="T:COSXML.Model.Tag.DeleteResult.Error"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.DeleteResult.Deleted.key">
            <summary>
            Object 的名称
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.DeleteResult.Deleted.versionId">
            <summary>
            Object 的版本Id
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.DeleteResult.Deleted.deleteMarker">
            <summary>
            deleete marker
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.DeleteResult.Deleted.deleteMarkerVersionId">
            <summary>
            delete marker versionId
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.DeleteResult.Error.key">
            <summary>
            删除失败的 Object 的名称
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.DeleteResult.Error.code">
            <summary>
            删除失败的错误代码
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.DeleteResult.Error.message">
            <summary>
            删除失败的错误信息
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.DeleteResult.Error.versionId">
            <summary>
            删除失败的 Object 的 版本Id
            </summary>
        </member>
        <member name="T:COSXML.Model.Tag.GrantAccount">
            <summary>
            授予者信息
            </summary>
        </member>
        <member name="M:COSXML.Model.Tag.GrantAccount.AddGrantAccount(System.String,System.String)">
            <summary>
            ownerUin,根账号
            subUin，子账号
            </summary>
            <param name="ownerUin"></param>
            <param name="subUin"></param>
        </member>
        <member name="T:COSXML.Model.Tag.InitiateMultipartUpload">
            <summary>
            初始化上传返回的信息
            <see cref="!:https://cloud.tencent.com/document/product/436/7746"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.InitiateMultipartUpload.bucket">
            <summary>
            分片上传的目标 Bucket，由用户自定义字符串和系统生成appid数字串由中划线连接而成，如：mybucket-1250000000.
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.InitiateMultipartUpload.key">
            <summary>
            Object 的名称
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.InitiateMultipartUpload.uploadId">
            <summary>
            在后续上传中使用的 ID
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.LifecycleConfiguration.rules">
            <summary>
            规则描述
            <see cref="T:COSXML.Model.Tag.LifecycleConfiguration.Rule"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.LifecycleConfiguration.Rule.id">
            <summary>
            用于唯一标识规则，长度不能超过 255 个字符
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.LifecycleConfiguration.Rule.filter">
            <summary>
            Filter 用于描述规则影响的 Object 集合
            <see cref="T:COSXML.Model.Tag.LifecycleConfiguration.Filter"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.LifecycleConfiguration.Rule.status">
            <summary>
            指明规则是否启用，枚举值：Enabled，Disabled
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.LifecycleConfiguration.Rule.transition">
            <summary>
            规则转换属性，对象何时转换为 Standard_IA 或 Archive
            <see cref="T:COSXML.Model.Tag.LifecycleConfiguration.Transition"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.LifecycleConfiguration.Rule.expiration">
            <summary>
            规则过期属性
            <see cref="T:COSXML.Model.Tag.LifecycleConfiguration.Expiration"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.LifecycleConfiguration.Rule.noncurrentVersionExpiration">
            <summary>
            指明非当前版本对象何时过期
            <see cref="T:COSXML.Model.Tag.LifecycleConfiguration.NoncurrentVersionExpiration"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.LifecycleConfiguration.Rule.noncurrentVersionTransition">
            <summary>
            指明非当前版本对象何时转换为 STANDARD_IA 或 ARCHIVE
            <see cref="T:COSXML.Model.Tag.LifecycleConfiguration.NoncurrentVersionTransition"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.LifecycleConfiguration.Rule.abortIncompleteMultiUpload">
            <summary>
            设置允许分片上传保持运行的最长时间
            <see cref="T:COSXML.Model.Tag.LifecycleConfiguration.AbortIncompleteMultiUpload"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.LifecycleConfiguration.Filter.prefix">
            <summary>
            指定规则所适用的前缀。匹配前缀的对象受该规则影响，Prefix 最多只能有一个
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.LifecycleConfiguration.Transition.days">
            <summary>
            指明规则对应的动作在对象最后的修改日期过后多少天操作
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.LifecycleConfiguration.Transition.date">
            <summary>
            指明规则对应的动作在何时操作
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.LifecycleConfiguration.Transition.storageClass">
            <summary>
            指定 Object 转储到的目标存储类型，枚举值： STANDARD_IA, ARCHIVE
            <see cref="T:COSXML.Common.CosStorageClass"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.LifecycleConfiguration.Expiration.date">
            <summary>
            指明规则对应的动作在何时操作
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.LifecycleConfiguration.Expiration.days">
            <summary>
            指明规则对应的动作在对象最后的修改日期过后多少天操作
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.LifecycleConfiguration.Expiration.expiredObjectDeleteMarker">
            <summary>
            删除过期对象删除标记，取值为 true，false
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.LifecycleConfiguration.NoncurrentVersionExpiration.noncurrentDays">
            <summary>
            指明规则对应的动作在对象变成非当前版本多少天后执行
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.LifecycleConfiguration.NoncurrentVersionTransition.noncurrentDays">
            <summary>
            指明规则对应的动作在对象变成非当前版本多少天后执行
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.LifecycleConfiguration.NoncurrentVersionTransition.storageClass">
            <summary>
            指定 Object 转储到的目标存储类型
            <see cref="T:COSXML.Common.CosStorageClass"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.LifecycleConfiguration.AbortIncompleteMultiUpload.daysAfterInitiation">
            <summary>
            指明分片上传开始后多少天内必须完成上传
            </summary>
        </member>
        <member name="T:COSXML.Model.Tag.ListAllMyBuckets">
            <summary>
            <see cref="!:https://cloud.tencent.com/document/product/436/8291"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListAllMyBuckets.owner">
            <summary>
            Bucket 持有者的信息
            <see cref="T:COSXML.Model.Tag.ListAllMyBuckets.Owner"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListAllMyBuckets.buckets">
            <summary>
            本次响应的所有 Bucket 列表信息
            <see cref="T:COSXML.Model.Tag.ListAllMyBuckets.Bucket"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListAllMyBuckets.Owner.id">
            <summary>
            Bucket 所有者的 ID
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListAllMyBuckets.Owner.disPlayName">
            <summary>
            Bucket 所有者的名字信息
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListAllMyBuckets.Bucket.name">
            <summary>
            Bucket 的名称
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListAllMyBuckets.Bucket.location">
            <summary>
            Bucket 所在地域
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListAllMyBuckets.Bucket.createDate">
            <summary>
            Bucket 创建时间。ISO8601 格式
            </summary>
        </member>
        <member name="T:COSXML.Model.Tag.ListBucket">
            <summary>
            保存 Get Bucket 请求结果的所有信息
            <see cref="!:https://cloud.tencent.com/document/product/436/7734#.E8.AF.B7.E6.B1.82.E7.A4.BA.E4.BE.8B"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListBucket.name">
            <summary>
            Bucket 的名称
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListBucket.encodingType">
            <summary>
            编码格式
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListBucket.prefix">
            <summary>
            前缀匹配，用来规定响应请求返回的文件前缀地址
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListBucket.marker">
            <summary>
            默认以 UTF-8 二进制顺序列出条目，所有列出条目从 marker 开始
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListBucket.maxKeys">
            <summary>
            单次响应请求内返回结果的最大的条目数量
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListBucket.isTruncated">
            <summary>
            响应请求条目是否被截断，布尔值：true，false
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListBucket.nextMarker">
            <summary>
            假如返回条目被截断，则返回 NextMarker 就是下一个条目的起点
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListBucket.contentsList">
            <summary>
            对象元数据信息列表
            <see cref="T:COSXML.Model.Tag.ListBucket.Contents"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListBucket.commonPrefixesList">
            <summary>
            将 Prefix 到 delimiter 之间的相同路径归为一类，定义为 Common Prefix
            <see cref="T:COSXML.Model.Tag.ListBucket.CommonPrefixes"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListBucket.Contents.key">
            <summary>
            Object 的 Key
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListBucket.Contents.lastModified">
            <summary>
            Object 最后被修改时间
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListBucket.Contents.eTag">
            <summary>
            文件的 eTag
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListBucket.Contents.size">
            <summary>
            文件大小，单位是 Byte
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListBucket.Contents.owner">
            <summary>
            Bucket 持有者信息
            <see cref="T:COSXML.Model.Tag.ListBucket.Owner"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListBucket.Contents.storageClass">
            <summary>
            Object 的存储级别，枚举值：STANDARD，STANDARD_IA，ARCHIVE
            <see cref="T:COSXML.Common.CosStorageClass"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListBucket.CommonPrefixes.prefix">
            <summary>
            单条 Common 的前缀
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListBucket.Owner.id">
            <summary>
            Bucket 的 AppID
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListBucketVersions.CommonPrefixes.prefix">
            <summary>
            显示具体的 CommonPrefixes
            </summary>
        </member>
        <member name="T:COSXML.Model.Tag.ListMultipartUploads">
            <summary>
            所有分块上传的信息
            <see cref="!:https://cloud.tencent.com/document/product/436/7736"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListMultipartUploads.bucket">
            <summary>
            分块上传的目标 Bucket
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListMultipartUploads.encodingType">
            <summary>
            规定返回值的编码格式，合法值：url
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListMultipartUploads.keyMarker">
            <summary>
            列出条目从该 key 值开始
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListMultipartUploads.uploadIdMarker">
            <summary>
            列出条目从该 UploadId 值开始
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListMultipartUploads.nextKeyMarker">
            <summary>
            假如返回条目被截断，则返回 NextKeyMarker 就是下一个条目的起点
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListMultipartUploads.nextUploadIdMarker">
            <summary>
            假如返回条目被截断，则返回 UploadId 就是下一个条目的起点
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListMultipartUploads.maxUploads">
            <summary>
            设置最大返回的 multipart 数量，合法取值从 0 到 1000
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListMultipartUploads.isTruncated">
            <summary>
            返回条目是否被截断，布尔值：TRUE，FALSE
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListMultipartUploads.prefix">
            <summary>
            限定返回的 Object key 必须以 Prefix 作为前缀。
            注意使用 prefix 查询时，返回的 key 中仍会包含 Prefix
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListMultipartUploads.delimiter">
            <summary>
            定界符为一个符号，
            对 object 名字包含指定前缀且第一次出现 delimiter 字符之间的 object 作为一组元素：common prefix。
            如果没有 prefix，则从路径起点开始
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListMultipartUploads.uploads">
            <summary>
            每个 Upload 的信息
            <see cref="T:COSXML.Model.Tag.ListMultipartUploads.Upload"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListMultipartUploads.commonPrefixesList">
            <summary>
            将 prefix 到 delimiter 之间的相同路径归为一类，定义为 Common Prefix
            <see cref="T:COSXML.Model.Tag.ListMultipartUploads.CommonPrefixes"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListMultipartUploads.Upload.key">
            <summary>
            Object 的名称
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListMultipartUploads.Upload.uploadID">
            <summary>
            示本次分块上传的 ID
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListMultipartUploads.Upload.storageClass">
            <summary>
            用来表示分块的存储级别，枚举值：STANDARD，STANDARD_IA，ARCHIVE
            <see cref="T:COSXML.Common.CosRegion"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListMultipartUploads.Upload.initiator">
            <summary>
            用来表示本次上传发起者的信息
            <see cref="F:COSXML.Model.Tag.ListMultipartUploads.Upload.initiator"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListMultipartUploads.Upload.owner">
            <summary>
            用来表示这些分块所有者的信息
            <see cref="T:COSXML.Model.Tag.ListMultipartUploads.Owner"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListMultipartUploads.Upload.initiated">
            <summary>
            分块上传的起始时间
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListMultipartUploads.CommonPrefixes.prefix">
            <summary>
            显示具体的 CommonPrefixes
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListMultipartUploads.Initiator.uin">
            <summary>
            用户唯一的 CAM 身份 UIN
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListMultipartUploads.Initiator.id">
            <summary>
            用户唯一的 CAM 身份 ID
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListMultipartUploads.Initiator.displayName">
            <summary>
            用户身份 ID 的简称（UIN）
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListMultipartUploads.Owner.uid">
            <summary>
            用户唯一的 CAM 身份 UID
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListMultipartUploads.Owner.id">
            <summary>
            用户唯一的 CAM 身份 ID
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListMultipartUploads.Owner.displayName">
            <summary>
            用户身份 ID 的简称（UIN）
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListParts.bucket">
            <summary>
            分块上传的目标 Bucke
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListParts.encodingType">
            <summary>
            规定返回值的编码方式
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListParts.key">
            <summary>
            Object 的名称
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListParts.uploadId">
            <summary>
            本次分块上传的 uploadID
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListParts.owner">
            <summary>
            表示这些分块所有者的信息
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListParts.partNumberMarker">
            <summary>
            默认以 UTF-8 二进制顺序列出条目，所有列出条目从 marker 开始
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListParts.initiator">
            <summary>
            表示本次上传发起者的信息
            <see cref="T:COSXML.Model.Tag.ListParts.Initiator"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListParts.storageClass">
            <summary>
            表示这些分块的存储级别
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListParts.nextPartNumberMarker">
            <summary>
            假如返回条目被截断，则返回 nextPartNumberMarker 就是下一个条目的起点
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListParts.maxParts">
            <summary>
            单次返回最大的条目数量
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListParts.isTruncated">
            <summary>
            返回条目是否被截断，布尔值：TRUE，FALSE
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListParts.parts">
            <summary>
            表示每一个块的信息
            <see cref="T:COSXML.Model.Tag.ListParts.Part"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListParts.Owner.id">
            创建者的一个唯一标识
        </member>
        <member name="F:COSXML.Model.Tag.ListParts.Owner.disPlayName">
            创建者的用户名描述
        </member>
        <member name="F:COSXML.Model.Tag.ListParts.Initiator.id">
            <summary>
            创建者的一个唯一标识
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListParts.Initiator.disPlayName">
            <summary>
            创建者的用户名描述
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListParts.Part.partNumber">
            <summary>
            块的编号
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListParts.Part.lastModified">
            <summary>
            块最后修改时间
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListParts.Part.eTag">
            <summary>
            Object 块的 MD5 算法校验值
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.ListParts.Part.size">
            <summary>
            块大小，单位 Byte
            </summary>
        </member>
        <member name="T:COSXML.Model.Tag.LocationConstraint">
            <summary>
            地域信息
            <see cref="!:https://cloud.tencent.com/document/product/436/8275"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.LocationConstraint.location">
            <summary>
             Bucket 所在地域
             <see cref="T:COSXML.Common.CosRegion"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.PostResponse.location">
            <summary>
            对象的完整路径。
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.PostResponse.bucket">
            <summary>
            对象所在的存储桶
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.PostResponse.key">
            <summary>
            对象 key 名
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.PostResponse.eTag">
            <summary>
            对象Etag 内容
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.PreSignatureStruct.appid">
            <summary>
            cos 服务的appid
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.PreSignatureStruct.bucket">
            <summary>
            存储桶名称
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.PreSignatureStruct.region">
            <summary>
            Bucket所属地域
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.PreSignatureStruct.host">
            <summary>
            设置 host
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.PreSignatureStruct.key">
            <summary>
            对象键
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.PreSignatureStruct.isHttps">
            <summary>
            true:https; false: http
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.PreSignatureStruct.httpMethod">
            <summary>
            http request method : get , put , etc.
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.PreSignatureStruct.queryParameters">
            <summary>
            签名需要校验的url中查询参数
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.PreSignatureStruct.headers">
            <summary>
            签名需要校验的headers
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.PreSignatureStruct.signDurationSecond">
            <summary>
            签名 sign的有效期，若 小于 0，则取keyTime.
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.RestoreConfigure.days">
            <summary>
            设置临时副本的过期时间
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.RestoreConfigure.casJobParameters">
            <summary>
            归档存储工作参数配置
            <see cref="T:COSXML.Model.Tag.RestoreConfigure.CASJobParameters"/>
            </summary>
        </member>
        <member name="F:COSXML.Model.Tag.RestoreConfigure.CASJobParameters.tier">
            <summary>
            恢复数据时，Tier 可以指定为 CAS 支持的三种恢复类型，分别为 Expedited、Standard、Bulk
            <see cref="T:COSXML.Model.Tag.RestoreConfigure.Tier"/>
            </summary>
        </member>
        <member name="M:COSXML.Model.CAM.CAMStatement.AddResource(System.String,System.String,System.String)">
            <summary>
            指定资源，
            </summary>
            <param name="appid"></param>
            <param name="region"></param>
            <param name="resourcePreifix">具体的对象资源，可以是*表示所有，格式 bucket/objectKey</param>
        </member>
        <member name="M:COSXML.Model.CAM.CAMStatement.AddActions(System.String)">
            <summary>
            指定具体cos api
            </summary>
            <param name="action"></param>
        </member>
        <member name="T:COSXML.Network.CommandTask">
            <summary>
            network request and response
            type1: command request
            type2: upload file
            type3: download file
            difference: body progress
            </summary>
        </member>
        <member name="M:COSXML.Network.CommandTask.Init(COSXML.Network.HttpClientConfig)">
            <summary>
            init connectionLimit and statueCode = 100 action
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:COSXML.Network.CommandTask.Excute(COSXML.Network.Request,COSXML.Network.Response,COSXML.Network.HttpClientConfig)">
            <summary>
            sync excute
            </summary>
            <param name="request"></param>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:COSXML.Network.CommandTask.HandleHttpWebRequest(System.Net.HttpWebRequest,COSXML.Network.Request,COSXML.Network.HttpClientConfig)">
            <summary>
            handle request
            </summary>
            <param name="httpWebRequest"></param>
            <param name="request"></param>
            <param name="config"></param>
        </member>
        <member name="M:COSXML.Network.CommandTask.HandleHttpWebResponse(System.Net.HttpWebResponse,COSXML.Network.Response)">
            <summary>
            handle response
            </summary>
            <param name="httpWebResponse"></param>
            <param name="response"></param>
        </member>
        <member name="M:COSXML.Network.CommandTask.Schedue(COSXML.Network.Request,COSXML.Network.Response,COSXML.Network.HttpClientConfig)">
            <summary>
            async to excute 
            </summary>
            <param name="request"></param>
            <param name="response"></param>
            <param name="config"></param>
        </member>
        <member name="M:COSXML.Network.CommandTask.HandleHttpWebRequestHeaders(COSXML.Network.Request,System.Net.HttpWebRequest,COSXML.Network.HttpClientConfig)">
            <summary>
            handle request headers
            </summary>
            <param name="request"></param>
            <param name="httpWebRequest"></param>
            <param name="config"></param>
        </member>
        <member name="M:COSXML.Network.CommandTask.HandleHttpWebResponseHeaders(COSXML.Network.Response,System.Net.HttpWebResponse)">
            <summary>
            headle response headers
            </summary>
            <param name="response"></param>
            <param name="httpWebResponse"></param>
        </member>
        <member name="M:COSXML.Network.CommandTask.SetRequestProxy(System.Net.HttpWebRequest,COSXML.Network.HttpClientConfig)">
            <summary>
            set proxy
            </summary>
            <param name="httpWebRequest"></param>
            <param name="config"></param>
        </member>
        <member name="M:COSXML.Network.CommandTask.CheckValidationCertificate(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            check certificate
            </summary>
            <param name="sender"></param>
            <param name="certificate"></param>
            <param name="chain"></param>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="M:COSXML.Network.CommandTask.PrintReqeustInfo(System.Net.HttpWebRequest)">
            <summary>
            print request info
            </summary>
            <param name="httpWebRequest"></param>
        </member>
        <member name="M:COSXML.Network.CommandTask.PrintResponseInfo(System.Net.HttpWebResponse)">
            <summary>
            print response info
            </summary>
            <param name="httpWebResponse"></param>
        </member>
        <member name="T:COSXML.Network.HttpClient">
            <summary>
            input: CosRequest; output: CosResponse
            </summary>
        </member>
        <member name="M:COSXML.Network.HttpClient.Excute(COSXML.Model.CosRequest,COSXML.Model.CosResult)">
            <summary>
            excute request
            </summary>
            <param name="cosRequest"></param>
            <param name="cosResult"></param>
            <exception cref="T:COSXML.CosException.CosClientException">CosClientException</exception>
            <exception cref="T:COSXML.CosException.CosServerException">CosServerException</exception>
        </member>
        <member name="M:COSXML.Network.HttpClient.InternalExcute(COSXML.Model.CosRequest,COSXML.Model.CosResult)">
            <summary>
            excute request
            </summary>
            <param name="cosRequest"></param>
            <param name="cosResult"></param>
            <exception cref="T:COSXML.CosException.CosClientException">CosClientException</exception>
            <exception cref="T:COSXML.CosException.CosServerException">CosServerException</exception>
        </member>
        <member name="M:COSXML.Network.HttpClient.CheckSign(COSXML.Auth.QCloudSignSource,COSXML.Network.Request)">
            <summary>
            add authorization
            </summary>
            <param name="qcloudSignSource">QCloudSignSource</param>
            <param name="request"></param>
        </member>
        <member name="T:COSXML.Network.HttpClient.CosResponse">
            <summary>
            cos response
            分为两类：
            一类下载文件
            一类直接读取数据
            </summary>
        </member>
        <member name="M:COSXML.Network.HttpClient.CosResponse.HandleResponseHeader">
            <summary>
            response has been obtain, and parse headers from response
            </summary>
        </member>
        <member name="M:COSXML.Network.HttpClient.CosResponse.OnFinish(System.Boolean,System.Exception)">
            <summary>
            error
            </summary>
            <param name="ex"></param>
        </member>
        <member name="T:COSXML.Network.HttpUrl">
                 * //最基本的划分
                    [scheme:]scheme-specific-part[#fragment]  
                    //对scheme-specific-part进一步划分
                    [scheme:][//authority][path][?query][#fragment]  
                    //对authority再次划分, 这是最细分的结构
                    [scheme:][//host:port][path][?query][#fragment]
        </member>
        <member name="T:COSXML.Network.RequestBody">
            <summary>
            request body for http request
            </summary>
        </member>
        <member name="P:COSXML.Network.RequestBody.ContentLength">
            <summary>
            body length
            </summary>
        </member>
        <member name="P:COSXML.Network.RequestBody.ContentType">
            <summary>
            body mime type
            </summary>
        </member>
        <member name="M:COSXML.Network.RequestBody.GetMD5">
            <summary>
            calculation content md5
            </summary>
            <returns></returns>
        </member>
        <member name="M:COSXML.Network.RequestBody.OnWrite(System.IO.Stream)">
            <summary>
            Synchronization method: write data to outputStream 
            </summary>
            <param name="outputStream"> output stream for writing data</param>
        </member>
        <member name="M:COSXML.Network.RequestBody.StartHandleRequestBody(System.IO.Stream,COSXML.Network.EndRequestBody)">
            <summary>
            Asynchronous method: handle request body
            </summary>
            <param name="outputStream"></param>
            <param name="EndRequestBody"></param>
        </member>
        <member name="M:COSXML.Network.RequestBody.OnNotifyGetResponse">
            <summary>
            notify progress is complete!
            </summary>
        </member>
        <member name="M:COSXML.Network.RequestBody.UpdateProgress(System.Int64,System.Int64)">
            <summary>
            calculation progress
            </summary>
            <param name="complete"></param>
            <param name="total"></param>
        </member>
        <member name="T:COSXML.Network.MultipartRequestBody">
            --boundary\r\n
            content-type: value\r\n
            content-disposition: form-data; name="key"\r\n
            content-transfer-encoding: encoding\r\n
            \r\n
            value\r\n
            --boundary--
        </member>
        <member name="M:COSXML.Network.Response.OnFinish(System.Boolean,System.Exception)">
            <summary>
            handle body successfully or throw exception
            </summary>
            <param name="ex"></param>
            <param name="isSuccess"></param>
        </member>
        <member name="M:COSXML.Network.ResponseBody.HandleResponseBody(System.IO.Stream)">
            <summary>
            handle cos response
            </summary>
            <param name="inputStream"></param>
            <exception cref="!:CosServerException"> throw CosServerException </exception>
            <exception cref="T:System.Exception">throw Exception</exception>
        </member>
        <!-- 对于成员“T:COSXML.Utils.URLEncodeUtils”忽略有格式错误的 XML 注释 -->
        <member name="M:COSXML.Utils.URLEncodeUtils.EncodePathOfURL(System.String)">
            <summary>
            针对 URL 中 path 编码，则需要先将其按照 '/'分割，然后进行逐个块进行 value 编码
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:COSXML.Utils.URLEncodeUtils.Encode(System.String,System.Text.Encoding)">
            <summary>
            针对单个value，则只需满足 URLAllowChars 不需要编码即可.
            urlEncode: 转为一个byte -> 转为两个16进制 -> 前面加上 %
            </summary>
            <param name="value"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:COSXML.Utils.URLEncodeUtils.Decode(System.String)">
            <summary>
            解码比较统一，此处借用 Uri 来实现
            </summary>
            <param name="valueEncode"></param>
            <returns></returns>
        </member>
    </members>
</doc>
